"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateDatabaseError = void 0;
const database_1 = __importDefault(require("../../database"));
const mssql_1 = require("./dialects/mssql");
const mysql_1 = require("./dialects/mysql");
const oracle_1 = require("./dialects/oracle");
const postgres_1 = require("./dialects/postgres");
const sqlite_1 = require("./dialects/sqlite");
/**
 * Translates an error thrown by any of the databases into a pre-defined Exception. Currently
 * supports:
 * - Invalid Foreign Key
 * - Not Null Violation
 * - Record Not Unique
 * - Value Out of Range
 * - Value Too Long
 */
async function translateDatabaseError(error) {
    const database = database_1.default();
    switch (database.client.constructor.name) {
        case 'Client_MySQL':
            return mysql_1.extractError(error);
        case 'Client_PG':
            return postgres_1.extractError(error);
        case 'Client_SQLite3':
            return sqlite_1.extractError(error);
        case 'Client_Oracledb':
        case 'Client_Oracle':
            return oracle_1.extractError(error);
        case 'Client_MSSQL':
            return await mssql_1.extractError(error);
        default:
            return error;
    }
}
exports.translateDatabaseError = translateDatabaseError;
