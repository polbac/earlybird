"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionsService = void 0;
const schema_1 = __importDefault(require("@directus/schema"));
const cache_1 = require("../cache");
const constants_1 = require("../constants");
const database_1 = __importStar(require("../database"));
const collections_1 = require("../database/system-data/collections");
const env_1 = __importDefault(require("../env"));
const exceptions_1 = require("../exceptions");
const logger_1 = __importDefault(require("../logger"));
const fields_1 = require("../services/fields");
const items_1 = require("../services/items");
class CollectionsService {
    constructor(options) {
        this.knex = options.knex || database_1.default();
        this.accountability = options.accountability || null;
        this.schemaInspector = options.knex ? schema_1.default(options.knex) : database_1.getSchemaInspector();
        this.schema = options.schema;
        const { cache, schemaCache } = cache_1.getCache();
        this.cache = cache;
        this.schemaCache = schemaCache;
    }
    /**
     * Create a single new collection
     */
    async createOne(payload, opts) {
        if (this.accountability && this.accountability.admin !== true) {
            throw new exceptions_1.ForbiddenException();
        }
        if (!payload.collection)
            throw new exceptions_1.InvalidPayloadException(`"collection" is required`);
        // Directus heavily relies on the primary key of a collection, so we have to make sure that
        // every collection that is created has a primary key. If no primary key field is created
        // while making the collection, we default to an auto incremented id named `id`
        if (!payload.fields)
            payload.fields = [
                {
                    field: 'id',
                    type: 'integer',
                    meta: {
                        hidden: true,
                        interface: 'numeric',
                        readonly: true,
                    },
                    schema: {
                        is_primary_key: true,
                        has_auto_increment: true,
                    },
                },
            ];
        // Ensure that every field meta has the field/collection fields filled correctly
        payload.fields = payload.fields.map((field) => {
            if (field.meta) {
                field.meta = {
                    ...field.meta,
                    field: field.field,
                    collection: payload.collection,
                };
            }
            return field;
        });
        // Create the collection/fields in a transaction so it'll be reverted in case of errors or
        // permission problems. This might not work reliably in MySQL, as it doesn't support DDL in
        // transactions.
        await this.knex.transaction(async (trx) => {
            const fieldsService = new fields_1.FieldsService({ knex: trx, schema: this.schema });
            // This operation is locked to admin users only, so we don't have to worry about the order
            // of operations here with regards to permissions checks
            const collectionItemsService = new items_1.ItemsService('directus_collections', {
                knex: trx,
                accountability: this.accountability,
                schema: this.schema,
            });
            const fieldItemsService = new items_1.ItemsService('directus_fields', {
                knex: trx,
                accountability: this.accountability,
                schema: this.schema,
            });
            if (payload.collection.startsWith('directus_')) {
                throw new exceptions_1.InvalidPayloadException(`Collections can't start with "directus_"`);
            }
            if (payload.collection in this.schema.collections) {
                throw new exceptions_1.InvalidPayloadException(`Collection "${payload.collection}" already exists.`);
            }
            await trx.schema.createTable(payload.collection, (table) => {
                for (const field of payload.fields) {
                    if (field.type && constants_1.ALIAS_TYPES.includes(field.type) === false) {
                        fieldsService.addColumnToTable(table, field);
                    }
                }
            });
            await collectionItemsService.createOne({
                ...(payload.meta || {}),
                collection: payload.collection,
            });
            const fieldPayloads = payload.fields.filter((field) => field.meta).map((field) => field.meta);
            await fieldItemsService.createMany(fieldPayloads);
            return payload.collection;
        });
        if (this.cache && env_1.default.CACHE_AUTO_PURGE && (opts === null || opts === void 0 ? void 0 : opts.autoPurgeCache) !== false) {
            await this.cache.clear();
        }
        if (this.schemaCache) {
            await this.schemaCache.clear();
        }
        return payload.collection;
    }
    /**
     * Create multiple new collections
     */
    async createMany(payloads, opts) {
        const collections = await this.knex.transaction(async (trx) => {
            const service = new CollectionsService({
                schema: this.schema,
                accountability: this.accountability,
                knex: trx,
            });
            const collectionNames = [];
            for (const payload of payloads) {
                const name = await service.createOne(payload, { autoPurgeCache: false });
                collectionNames.push(name);
            }
            return collectionNames;
        });
        if (this.cache && env_1.default.CACHE_AUTO_PURGE && (opts === null || opts === void 0 ? void 0 : opts.autoPurgeCache) !== false) {
            await this.cache.clear();
        }
        if (this.schemaCache) {
            await this.schemaCache.clear();
        }
        return collections;
    }
    /**
     * Read all collections. Currently doesn't support any query.
     */
    async readByQuery() {
        const collectionItemsService = new items_1.ItemsService('directus_collections', {
            knex: this.knex,
            schema: this.schema,
            accountability: this.accountability,
        });
        let tablesInDatabase = await this.schemaInspector.tableInfo();
        if (this.accountability && this.accountability.admin !== true) {
            const collectionsYouHavePermissionToRead = this.schema.permissions
                .filter((permission) => {
                return permission.action === 'read';
            })
                .map(({ collection }) => collection);
            tablesInDatabase = tablesInDatabase.filter((table) => {
                return collectionsYouHavePermissionToRead.includes(table.name);
            });
        }
        const tablesToFetchInfoFor = tablesInDatabase.map((table) => table.name);
        const meta = (await collectionItemsService.readByQuery({
            filter: { collection: { _in: tablesToFetchInfoFor } },
            limit: -1,
        }));
        meta.push(...collections_1.systemCollectionRows);
        const collections = [];
        /**
         * The collections as known in the schema cache.
         */
        const knownCollections = Object.keys(this.schema.collections);
        for (const table of tablesInDatabase) {
            const collection = {
                collection: table.name,
                meta: meta.find((systemInfo) => (systemInfo === null || systemInfo === void 0 ? void 0 : systemInfo.collection) === table.name) || null,
                schema: table,
            };
            // By only returning collections that are known in the schema cache, we prevent weird
            // situations where the collections endpoint returns different info from every other
            // collection
            if (knownCollections.includes(table.name)) {
                collections.push(collection);
            }
        }
        return collections;
    }
    /**
     * Get a single collection by name
     */
    async readOne(collectionKey) {
        const result = await this.readMany([collectionKey]);
        return result[0];
    }
    /**
     * Read many collections by name
     */
    async readMany(collectionKeys) {
        const collectionItemsService = new items_1.ItemsService('directus_collections', {
            knex: this.knex,
            accountability: this.accountability,
            schema: this.schema,
        });
        if (this.accountability && this.accountability.admin !== true) {
            const permissions = this.schema.permissions.filter((permission) => {
                return permission.action === 'read' && collectionKeys.includes(permission.collection);
            });
            if (collectionKeys.length !== permissions.length) {
                const collectionsYouHavePermissionToRead = permissions.map(({ collection }) => collection);
                for (const collectionKey of collectionKeys) {
                    if (collectionsYouHavePermissionToRead.includes(collectionKey) === false) {
                        throw new exceptions_1.ForbiddenException();
                    }
                }
            }
        }
        const tablesInDatabase = await this.schemaInspector.tableInfo();
        const tables = tablesInDatabase.filter((table) => collectionKeys.includes(table.name));
        const meta = (await collectionItemsService.readByQuery({
            filter: { collection: { _in: collectionKeys } },
            limit: -1,
        }));
        meta.push(...collections_1.systemCollectionRows);
        const collections = [];
        const knownCollections = Object.keys(this.schema.collections);
        for (const table of tables) {
            const collection = {
                collection: table.name,
                meta: meta.find((systemInfo) => (systemInfo === null || systemInfo === void 0 ? void 0 : systemInfo.collection) === table.name) || null,
                schema: table,
            };
            // By only returning collections that are known in the schema cache, we prevent weird
            // situations where the collections endpoint returns different info from every other
            // collection
            if (knownCollections.includes(table.name)) {
                collections.push(collection);
            }
        }
        return collections;
    }
    /**
     * Update a single collection by name
     *
     * Note: only supports updating `meta`
     */
    async updateOne(collectionKey, data, opts) {
        if (this.accountability && this.accountability.admin !== true) {
            throw new exceptions_1.ForbiddenException();
        }
        const collectionItemsService = new items_1.ItemsService('directus_collections', {
            knex: this.knex,
            accountability: this.accountability,
            schema: this.schema,
        });
        const payload = data;
        if (!payload.meta) {
            throw new exceptions_1.InvalidPayloadException(`"meta" key is required`);
        }
        const exists = !!(await this.knex
            .select('collection')
            .from('directus_collections')
            .where({ collection: collectionKey })
            .first());
        if (exists) {
            await collectionItemsService.updateOne(collectionKey, payload.meta, opts);
        }
        else {
            await collectionItemsService.createOne({ ...payload.meta, collection: collectionKey }, opts);
        }
        return collectionKey;
    }
    /**
     * Update multiple collections by name
     */
    async updateMany(collectionKeys, data) {
        if (this.accountability && this.accountability.admin !== true) {
            throw new exceptions_1.ForbiddenException();
        }
        await this.knex.transaction(async (trx) => {
            const service = new CollectionsService({
                schema: this.schema,
                accountability: this.accountability,
                knex: trx,
            });
            for (const collectionKey of collectionKeys) {
                await service.updateOne(collectionKey, data, { autoPurgeCache: false });
            }
        });
        return collectionKeys;
    }
    /**
     * Delete a single collection This will delete the table and all records within. It'll also
     * delete any fields, presets, activity, revisions, and permissions relating to this collection
     */
    async deleteOne(collectionKey, opts) {
        if (this.accountability && this.accountability.admin !== true) {
            throw new exceptions_1.ForbiddenException();
        }
        const tablesInDatabase = Object.keys(this.schema.collections);
        if (tablesInDatabase.includes(collectionKey) === false) {
            throw new exceptions_1.ForbiddenException();
        }
        await this.knex.transaction(async (trx) => {
            var _a;
            const collectionItemsService = new items_1.ItemsService('directus_collections', {
                knex: trx,
                accountability: this.accountability,
                schema: this.schema,
            });
            const fieldsService = new fields_1.FieldsService({
                knex: trx,
                accountability: this.accountability,
                schema: this.schema,
            });
            await trx('directus_fields').delete().where('collection', '=', collectionKey);
            await trx('directus_presets').delete().where('collection', '=', collectionKey);
            const revisionsToDelete = await trx.select('id').from('directus_revisions').where({ collection: collectionKey });
            if (revisionsToDelete.length > 0) {
                const keys = revisionsToDelete.map((record) => record.id);
                await trx('directus_revisions').update({ parent: null }).whereIn('parent', keys);
            }
            await trx('directus_revisions').delete().where('collection', '=', collectionKey);
            await trx('directus_activity').delete().where('collection', '=', collectionKey);
            await trx('directus_permissions').delete().where('collection', '=', collectionKey);
            await trx('directus_relations').delete().where({ many_collection: collectionKey });
            const relations = this.schema.relations.filter((relation) => {
                return relation.collection === collectionKey || relation.related_collection === collectionKey;
            });
            for (const relation of relations) {
                // Delete related o2m fields that point to current collection
                if (relation.related_collection && ((_a = relation.meta) === null || _a === void 0 ? void 0 : _a.one_field)) {
                    await fieldsService.deleteField(relation.related_collection, relation.meta.one_field);
                }
                // Delete related m2o fields that point to current collection
                if (relation.related_collection === collectionKey) {
                    await fieldsService.deleteField(relation.collection, relation.field);
                }
            }
            const m2aRelationsThatIncludeThisCollection = this.schema.relations.filter((relation) => {
                var _a, _b;
                return (_b = (_a = relation.meta) === null || _a === void 0 ? void 0 : _a.one_allowed_collections) === null || _b === void 0 ? void 0 : _b.includes(collectionKey);
            });
            for (const relation of m2aRelationsThatIncludeThisCollection) {
                const newAllowedCollections = relation
                    .meta.one_allowed_collections.filter((collection) => collectionKey !== collection)
                    .join(',');
                await trx('directus_relations')
                    .update({ one_allowed_collections: newAllowedCollections })
                    .where({ id: relation.meta.id });
            }
            await collectionItemsService.deleteOne(collectionKey);
            await trx.schema.dropTable(collectionKey);
        });
        if (this.cache && env_1.default.CACHE_AUTO_PURGE && (opts === null || opts === void 0 ? void 0 : opts.autoPurgeCache) !== false) {
            await this.cache.clear();
        }
        if (this.schemaCache) {
            await this.schemaCache.clear();
        }
        return collectionKey;
    }
    /**
     * Delete multiple collections by key
     */
    async deleteMany(collectionKeys, opts) {
        if (this.accountability && this.accountability.admin !== true) {
            throw new exceptions_1.ForbiddenException();
        }
        await this.knex.transaction(async (trx) => {
            const service = new CollectionsService({
                schema: this.schema,
                accountability: this.accountability,
                knex: trx,
            });
            for (const collectionKey of collectionKeys) {
                await service.deleteOne(collectionKey, { autoPurgeCache: false });
            }
        });
        if (this.cache && env_1.default.CACHE_AUTO_PURGE && (opts === null || opts === void 0 ? void 0 : opts.autoPurgeCache) !== false) {
            await this.cache.clear();
        }
        if (this.schemaCache) {
            await this.schemaCache.clear();
        }
        return collectionKeys;
    }
    async create(data) {
        logger_1.default.warn('CollectionsService.create is deprecated and will be removed before v9.0.0. Use createOne or createMany instead.');
        if (Array.isArray(data)) {
            return await this.createMany(data);
        }
        else {
            return await this.createOne(data);
        }
    }
    async readByKey(collection) {
        logger_1.default.warn('CollectionsService.readByKey is deprecated and will be removed before v9.0.0. Use readOne or readMany instead.');
        if (Array.isArray(collection))
            return await this.readMany(collection);
        return await this.readOne(collection);
    }
    async update(data, key) {
        if (Array.isArray(key))
            return await this.updateMany(key, data);
        return await this.updateOne(key, data);
    }
    async delete(collection) {
        logger_1.default.warn('CollectionsService.delete is deprecated and will be removed before v9.0.0. Use deleteOne or deleteMany instead.');
        if (Array.isArray(collection))
            return await this.deleteMany(collection);
        return await this.deleteOne(collection);
    }
}
exports.CollectionsService = CollectionsService;
