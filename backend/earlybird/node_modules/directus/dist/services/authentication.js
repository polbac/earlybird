"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationService = void 0;
const argon2_1 = __importDefault(require("argon2"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const ms_1 = __importDefault(require("ms"));
const nanoid_1 = require("nanoid");
const otplib_1 = require("otplib");
const database_1 = __importDefault(require("../database"));
const emitter_1 = __importStar(require("../emitter"));
const env_1 = __importDefault(require("../env"));
const exceptions_1 = require("../exceptions");
const rate_limiter_1 = require("../rate-limiter");
const activity_1 = require("../services/activity");
const types_1 = require("../types");
const settings_1 = require("./settings");
const lodash_1 = require("lodash");
const perf_hooks_1 = require("perf_hooks");
const stall_1 = require("../utils/stall");
const loginAttemptsLimiter = rate_limiter_1.createRateLimiter({ duration: 0 });
class AuthenticationService {
    constructor(options) {
        this.knex = options.knex || database_1.default();
        this.accountability = options.accountability || null;
        this.activityService = new activity_1.ActivityService({ knex: this.knex, schema: options.schema });
        this.schema = options.schema;
    }
    /**
     * Retrieve the tokens for a given user email.
     *
     * Password is optional to allow usage of this function within the SSO flow and extensions. Make sure
     * to handle password existence checks elsewhere
     */
    async authenticate(options) {
        const STALL_TIME = 100;
        const timeStart = perf_hooks_1.performance.now();
        const settingsService = new settings_1.SettingsService({
            knex: this.knex,
            schema: this.schema,
        });
        const { email, password, ip, userAgent, otp } = options;
        let user = await this.knex
            .select('id', 'password', 'role', 'tfa_secret', 'status')
            .from('directus_users')
            .whereRaw('LOWER(??) = ?', ['email', email.toLowerCase()])
            .first();
        const updatedUser = await emitter_1.default.emitAsync('auth.login.before', options, {
            event: 'auth.login.before',
            action: 'login',
            schema: this.schema,
            payload: options,
            accountability: this.accountability,
            status: 'pending',
            user: user === null || user === void 0 ? void 0 : user.id,
            database: this.knex,
        });
        if (updatedUser) {
            user = updatedUser.length > 0 ? updatedUser.reduce((val, acc) => lodash_1.merge(acc, val)) : user;
        }
        const emitStatus = (status) => {
            emitter_1.emitAsyncSafe('auth.login', options, {
                event: 'auth.login',
                action: 'login',
                schema: this.schema,
                payload: options,
                accountability: this.accountability,
                status,
                user: user === null || user === void 0 ? void 0 : user.id,
                database: this.knex,
            });
        };
        if (!user || user.status !== 'active') {
            emitStatus('fail');
            if ((user === null || user === void 0 ? void 0 : user.status) === 'suspended') {
                await stall_1.stall(STALL_TIME, timeStart);
                throw new exceptions_1.UserSuspendedException();
            }
            else {
                await stall_1.stall(STALL_TIME, timeStart);
                throw new exceptions_1.InvalidCredentialsException();
            }
        }
        const { auth_login_attempts: allowedAttempts } = await settingsService.readSingleton({
            fields: ['auth_login_attempts'],
        });
        if (allowedAttempts !== null) {
            // @ts-ignore - See https://github.com/animir/node-rate-limiter-flexible/issues/109
            loginAttemptsLimiter.points = allowedAttempts;
            try {
                await loginAttemptsLimiter.consume(user.id);
            }
            catch (err) {
                await this.knex('directus_users').update({ status: 'suspended' }).where({ id: user.id });
                user.status = 'suspended';
                // This means that new attempts after the user has been re-activated will be accepted
                await loginAttemptsLimiter.set(user.id, 0, 0);
            }
        }
        if (password !== undefined) {
            if (!user.password) {
                emitStatus('fail');
                await stall_1.stall(STALL_TIME, timeStart);
                throw new exceptions_1.InvalidCredentialsException();
            }
            if ((await argon2_1.default.verify(user.password, password)) === false) {
                emitStatus('fail');
                await stall_1.stall(STALL_TIME, timeStart);
                throw new exceptions_1.InvalidCredentialsException();
            }
        }
        if (user.tfa_secret && !otp) {
            emitStatus('fail');
            await stall_1.stall(STALL_TIME, timeStart);
            throw new exceptions_1.InvalidOTPException(`"otp" is required`);
        }
        if (user.tfa_secret && otp) {
            const otpValid = await this.verifyOTP(user.id, otp);
            if (otpValid === false) {
                emitStatus('fail');
                await stall_1.stall(STALL_TIME, timeStart);
                throw new exceptions_1.InvalidOTPException(`"otp" is invalid`);
            }
        }
        const payload = {
            id: user.id,
        };
        /**
         * @TODO
         * Sign token with combination of server secret + user password hash
         * That way, old tokens are immediately invalidated whenever the user changes their password
         */
        const accessToken = jsonwebtoken_1.default.sign(payload, env_1.default.SECRET, {
            expiresIn: env_1.default.ACCESS_TOKEN_TTL,
        });
        const refreshToken = nanoid_1.nanoid(64);
        const refreshTokenExpiration = new Date(Date.now() + ms_1.default(env_1.default.REFRESH_TOKEN_TTL));
        await this.knex('directus_sessions').insert({
            token: refreshToken,
            user: user.id,
            expires: refreshTokenExpiration,
            ip,
            user_agent: userAgent,
        });
        await this.knex('directus_sessions').delete().where('expires', '<', new Date());
        if (this.accountability) {
            await this.activityService.createOne({
                action: types_1.Action.AUTHENTICATE,
                user: user.id,
                ip: this.accountability.ip,
                user_agent: this.accountability.userAgent,
                collection: 'directus_users',
                item: user.id,
            });
        }
        await this.knex('directus_users').update({ last_access: new Date() }).where({ id: user.id });
        emitStatus('success');
        if (allowedAttempts !== null) {
            await loginAttemptsLimiter.set(user.id, 0, 0);
        }
        await stall_1.stall(STALL_TIME, timeStart);
        return {
            accessToken,
            refreshToken,
            expires: ms_1.default(env_1.default.ACCESS_TOKEN_TTL),
            id: user.id,
        };
    }
    async refresh(refreshToken) {
        if (!refreshToken) {
            throw new exceptions_1.InvalidCredentialsException();
        }
        const record = await this.knex
            .select('directus_sessions.*', 'directus_users.email', 'directus_users.id')
            .from('directus_sessions')
            .where({ 'directus_sessions.token': refreshToken })
            .leftJoin('directus_users', 'directus_sessions.user', 'directus_users.id')
            .first();
        if (!record || !record.email || record.expires < new Date()) {
            throw new exceptions_1.InvalidCredentialsException();
        }
        const accessToken = jsonwebtoken_1.default.sign({ id: record.id }, env_1.default.SECRET, {
            expiresIn: env_1.default.ACCESS_TOKEN_TTL,
        });
        const newRefreshToken = nanoid_1.nanoid(64);
        const refreshTokenExpiration = new Date(Date.now() + ms_1.default(env_1.default.REFRESH_TOKEN_TTL));
        await this.knex('directus_sessions')
            .update({ token: newRefreshToken, expires: refreshTokenExpiration })
            .where({ token: refreshToken });
        await this.knex('directus_users').update({ last_access: new Date() }).where({ id: record.id });
        return {
            accessToken,
            refreshToken: newRefreshToken,
            expires: ms_1.default(env_1.default.ACCESS_TOKEN_TTL),
            id: record.id,
        };
    }
    async logout(refreshToken) {
        await this.knex.delete().from('directus_sessions').where({ token: refreshToken });
    }
    generateTFASecret() {
        const secret = otplib_1.authenticator.generateSecret();
        return secret;
    }
    async generateOTPAuthURL(pk, secret) {
        const user = await this.knex.select('email').from('directus_users').where({ id: pk }).first();
        const project = await this.knex.select('project_name').from('directus_settings').limit(1).first();
        return otplib_1.authenticator.keyuri(user.email, (project === null || project === void 0 ? void 0 : project.project_name) || 'Directus', secret);
    }
    async verifyOTP(pk, otp, secret) {
        let tfaSecret;
        if (!secret) {
            const user = await this.knex.select('tfa_secret').from('directus_users').where({ id: pk }).first();
            if (!user.tfa_secret) {
                throw new exceptions_1.InvalidPayloadException(`User "${pk}" doesn't have TFA enabled.`);
            }
            tfaSecret = user.tfa_secret;
        }
        else {
            tfaSecret = secret;
        }
        return otplib_1.authenticator.check(otp, tfaSecret);
    }
    async verifyPassword(pk, password) {
        const userRecord = await this.knex.select('password').from('directus_users').where({ id: pk }).first();
        if (!userRecord || !userRecord.password) {
            throw new exceptions_1.InvalidCredentialsException();
        }
        if ((await argon2_1.default.verify(userRecord.password, password)) === false) {
            throw new exceptions_1.InvalidCredentialsException();
        }
        return true;
    }
}
exports.AuthenticationService = AuthenticationService;
