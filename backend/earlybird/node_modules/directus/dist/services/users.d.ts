import { Knex } from 'knex';
import { AbstractServiceOptions, Item, PrimaryKey, Query, SchemaOverview } from '../types';
import { Accountability } from '@directus/shared/types';
import { ItemsService, MutationOptions } from './items';
export declare class UsersService extends ItemsService {
    knex: Knex;
    accountability: Accountability | null;
    schema: SchemaOverview;
    service: ItemsService;
    constructor(options: AbstractServiceOptions);
    /**
     * User email has to be unique case-insensitive. This is an additional check to make sure that
     * the email is unique regardless of casing
     */
    private checkUniqueEmails;
    /**
     * Check if the provided password matches the strictness as configured in
     * directus_settings.auth_password_policy
     */
    private checkPasswordPolicy;
    private checkRemainingAdminExistence;
    /**
     * Create a new user
     */
    createOne(data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey>;
    /**
     * Create multiple new users
     */
    createMany(data: Partial<Item>[], opts?: MutationOptions): Promise<PrimaryKey[]>;
    updateOne(key: PrimaryKey, data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey>;
    updateMany(keys: PrimaryKey[], data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey[]>;
    updateByQuery(query: Query, data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey[]>;
    deleteOne(key: PrimaryKey, opts?: MutationOptions): Promise<PrimaryKey>;
    deleteMany(keys: PrimaryKey[], opts?: MutationOptions): Promise<PrimaryKey[]>;
    deleteByQuery(query: Query, opts?: MutationOptions): Promise<PrimaryKey[]>;
    inviteUser(email: string | string[], role: string, url: string | null, subject?: string | null): Promise<void>;
    acceptInvite(token: string, password: string): Promise<void>;
    requestPasswordReset(email: string, url: string | null, subject?: string | null): Promise<void>;
    resetPassword(token: string, password: string): Promise<void>;
    generateTFA(pk: string): Promise<Record<string, string>>;
    enableTFA(pk: string, otp: string, secret: string): Promise<void>;
    disableTFA(pk: string): Promise<void>;
    /**
     * @deprecated Use `createOne` or `createMany` instead
     */
    create(data: Partial<Item>[]): Promise<PrimaryKey[]>;
    create(data: Partial<Item>): Promise<PrimaryKey>;
    /**
     * @deprecated Use `updateOne` or `updateMany` instead
     */
    update(data: Partial<Item>, keys: PrimaryKey[]): Promise<PrimaryKey[]>;
    update(data: Partial<Item>, key: PrimaryKey): Promise<PrimaryKey>;
    update(data: Partial<Item>[]): Promise<PrimaryKey[]>;
    /**
     * @deprecated Use `deleteOne` or `deleteMany` instead
     */
    delete(key: PrimaryKey): Promise<PrimaryKey>;
    delete(keys: PrimaryKey[]): Promise<PrimaryKey[]>;
}
