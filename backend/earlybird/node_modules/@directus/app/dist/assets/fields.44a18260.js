var e="# Fields\n\n> Fields are a specific type of value within a Collection, storing the data of your item's content. Each field\n> represents a **column** in your database.\n\nFor example, an `articles` collection might have `title`, `body`, `author`, and `date_published` fields. Directus\nautomatically uses a built-in title formatter to display your database column names prettified, and you can use\n[schema translations](/concepts/translations/#schema-translations) to completely rename them if needed.\n\nFields also mirror other characteristics from their associated column, including its `type`, `default`, `length`,\n`allow_null`, etc.\n\n::: tip Relational Fields\n\nFields that reference other items (in the same collection or different) are called\n[relational fields](/concepts/relationships/). Linking or connecting data relationally is an immensely powerful feature\nof relational databases and SQL queries.\n\n:::\n\n::: tip Aliases\n\nNot all fields in Directus map directly to an actual database column within their table â€” these are called \"alias\"\nfields. For example, certain relational fields, like [One-to-Many (O2M)](/concepts/relationships/#one-to-many-o2m) and\n[Many-to-Many (M2M)](/concepts/relationships/#many-to-many-m2m), represent data that is stored in _other_ tables. Then\nthere are Presentation Fields that don't save data at all, such as dividers and action buttons.\n\n:::\n\n#### Relevant Guides\n\n- [Creating a Field](/guides/fields/#creating-a-field)\n- [Duplicating Fields](/guides/fields/#duplicating-a-field)\n- [Adjusting Field Layout](/guides/fields/#adjusting-field-layout)\n- [Deleting Fields](/guides/fields/#deleting-a-field)\n";export{e as default};
