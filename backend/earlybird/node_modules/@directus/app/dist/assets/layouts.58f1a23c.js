var n="# Custom Layouts <small></small>\n\n> Custom Layouts allow for building new ways to view or interact with Items via the Collection Detail pages.\n> [Learn more about Layouts](/guides/layouts/).\n\n## 1. Setup the Boilerplate\n\nEvery layout is a standalone \"package\" that contains at least a metadata file and a Vue component. We recommend using\nthe following file structure:\n\n```\nsrc/\n\tindex.js\n\tlayout.vue\n```\n\n### src/index.js\n\n```js\nimport { ref } from 'vue';\nimport LayoutComponent from './layout.vue';\n\nexport default {\n\tid: 'custom',\n\tname: 'Custom',\n\ticon: 'box',\n\tcomponent: LayoutComponent,\n\tslots: {\n\t\toptions: () => null,\n\t\tsidebar: () => null,\n\t\tactions: () => null,\n\t},\n\tsetup(props) {\n\t\tconst name = ref('Custom layout state');\n\n\t\treturn { name };\n\t},\n};\n```\n\n- `id` — The unique key for this layout. It is good practice to scope proprietary layouts with an author prefix.\n- `name` — The human-readable name for this layout.\n- `icon` — An icon name from the material icon set, or the extended list of Directus custom icons.\n- `component` — A reference to your Vue component.\n\n::: tip TypeScript\n\nSee\n[the TypeScript definition](https://github.com/directus/directus/blob/20355fee5eba514dd75565f60269311187010c66/app/src/layouts/types.ts#L4-L9)\nfor more info on what can go into this object.\n\n:::\n\n### src/layout.vue\n\n```vue\n<template>\n\t<div>{{ name }} - Collection: {{ props.collection }}</div>\n</template>\n\n<script>\nimport { toRefs } from 'vue';\nimport { useLayoutState } from '@directus/extension-sdk';\n\nexport default {\n\tsetup() {\n\t\tconst layoutState = useLayoutState();\n\t\tconst { props, name } = toRefs(layoutState.value);\n\n\t\treturn { props, name };\n\t},\n};\n<\/script>\n```\n\nThe props you can use in an layout are:\n\n- `collection` — The current collection's name.\n- `selection` (sync) - Any currently selected items.\n- `layout-options` (sync) - The user's current saved layout options.\n- `layout-query` (sync) - The user's layout query parameters. (eg: sort, limit, etc)\n- `filters` (sync) - The user's currently active filters.\n- `search-query` (sync) - The user's current search query.\n\n## 2. Install Dependencies\n\nSet up a package.json file by running:\n\n```bash\nnpm init -y\n```\n\nTo be read by the Admin App, your custom layouts's Vue component must first be bundled into a single `index.js` file. We\nrecommend bundling your code using the directus-extension CLI from our `@directus/extension-sdk` package. The CLI\ninternally uses a Rollup configuration tailored specifically to bundling Directus extensions. To install the Extension\nSDK, run this command:\n\n```bash\nnpm i -D @directus/extension-sdk\n```\n\nFor the directus-extension CLI to recognize the extension type, the input path and the output path, add this field to\nthe root of the `package.json` file:\n\n```json\n\"directus:extension\": {\n\t\"type\": \"layout\",\n\t\"path\": \"dist/index.js\",\n\t\"source\": \"src/index.js\",\n\t\"host\": \"^9.0.0-rc.87\",\n\t\"hidden\": false\n}\n```\n\n## 3. Develop Your Custom Layout\n\nThe layout itself is simply a Vue component, which provides an blank canvas for creating anything you need.\n\n## 4. Build and Deploy\n\nTo build the layout for use within Directus, run:\n\n```bash\nnpx directus-extension build\n```\n\nFinally, move the output from your layout's `dist` folder into your project's `/extensions/layouts/my-custom-layout`\nfolder. Keep in mind that the extensions directory is configurable within your env file, and may be located elsewhere.\n";export{n as default};
