var n="# Command Line Interface\n\n> Directus has two command line interfaces (CLI) that you can use for various actions. One is used for server-side\n> actions that relate to your on-prem instance, like migrating the database or resetting a user, while the other allows\n> you to interact with a Directus instance as you would with an SDK.\n\n[[toc]]\n\n## Server\n\nFor server-side CLI, all functionality can be accessed by running `npx directus <command>` in your project folder.\n\n### Initialize a New Project\n\n```\nnpx directus init\n```\n\nWill install the required database driver, and create a `.env` file based on the inputted values.\n\n### Bootstrap a Project\n\n```\nnpx directus bootstrap\n```\n\nWill use an existing `.env` file (or existing environment variables) to either install the database (if it's empty) or\nmigrate it to the latest version (if it already exists and has missing migrations).\n\nThis is very useful to use in environments where you're doing standalone automatic deployments, like a multi-container\nKubernetes configuration, or a similar approach on\n[DigitalOcean App Platform](/guides/installation/digitalocean-app-platform/) or\n[AWS Elastic Beanstalk](/guides/installation/aws/)\n\n::: tip First User\n\nYou can use the `ADMIN_EMAIL` and `ADMIN_PASSWORD` environment variables to automatically provision the first user on\nfirst creation using the `bootstrap` command. See [Environment Variables](/reference/environment-variables/) for more\ninformation.\n\n:::\n\n::: tip Skip Admin User/Role\n\nYou can pass the `--skipAdminInit` option to `bootstrap`, if you're creating your Admin role/user in another way (with a\ncustom migration or an external service, for example).\n\n:::\n\n### Install the Database\n\n```\nnpx directus database install\n```\n\nInstalls the Directus system tables on an empty database. Used internally by `bootstrap`\n\n### Upgrade the Database\n\n```\nnpx directus database migrate:latest\nnpx directus database migrate:up\nnpx directus database migrate:down\n```\n\nMigrate the database up/down to match the versions of Directus. Once you update Directus itself, make sure to run\n`npx directus database migrate:latest` (or `npx directus bootstrap`) to update your database.\n\n---\n\n## Client\n\nFor the client-side CLI, all functionality can be accessed by running `npx directusctl <command>`. You can also install\n`@directus/cli` on your project dependencies or globally on your machine. Note that if you run `directusctl` (installed\nglobally) in a folder containing a project that has a version of `@directus/cli` installed, the running global CLI will\nforward it's execution to the local installed version instead.\n\n### Help & Documentation\n\nThe documentation for all commands can be accessed through the CLI itself. You can list all the available commands\nthrough `directusctl --help` command. If you want help for a specific command you can use `directusctl <command> --help`\ninstead.\n\n### Instances\n\nMost client-side CLI commands needs a running Directus instance in order to work. To connect the CLI to an instance, you\ncan use `directusctl instance connect` command. These instance's configs are going to be saved on `~/.directus` folder.\n\nTo manage the connected instances, you can use `directusctl instance <command>` commands.\n\n#### Selecting instances\n\nBy default, commands will try using an instance named `default` when executing commands.\n\nIf you want to change which instance you want to use, either pass `--instance <name>` to the command, or configure\n`instance` variable on your project's Directus config file.\n\nFor example:\n\n> .directus.yml\n\n```yml\ninstance: my-project\n```\n\n### I/O\n\nThe CLI is designed with ease of use and automation in mind, this means that you can change the way the output is made\nby setting how you want the data to be written to the terminal. We currently support three formats, `table` (the default\none), `json` and `yaml`.\n\nThis makes it easier to parse and use data from Directus with other tools like `jq`, `yq`, `grep` or any other tools\nthat accepts data from `stdin`\n\nIt's also worth mentioning that everything is data. Try for example running `directusctl --help --format=json`.\n\n#### Table\n\nThe default output format. This is the \"pretty\" output, you'll most likely want to use this if you're not dealing with\ndata in a way you need to pipe it to another command and/or store it it for parsing.\n\nThis output will output colors and highlight content if it detects you're running in TTL.\n\n#### JSON\n\nThis format will output JSON notation strings to your terminal. By default if TTY is detected, it will highlight (can be\nturned off with special flags) and prettify the output to make it easier to read.\n\nUseful when you need to parse data using tools like `jq` for example.\n\n#### YAML\n\nThis format will output YAML strings to your terminal. By default if TTY is detected, it will highlight (can be turned\noff with special flags) and prettify the output to make it easier to read.\n\nUseful when you need to parse data using tools like `jq` for example.\n\n\x3c!-- ### Extending\n\nTo find how you can extend the CLI and write custom commands, check how we make Directus highly extensible on our\n[extensions overview page](/concepts/extensions/). --\x3e\n";export{n as default};
