var n='---\npageClass: page-reference\n---\n\n# Items: Data Access\n\n<div class="two-up">\n<div class="left">\n\n> Items are individual pieces of data in your database. They can be anything, from articles, to IoT status checks.\n> [Learn more about Items](/concepts/items/).\n\n</div>\n<div class="right">\n\n[[toc]]\n\n</div>\n</div>\n\n---\n\n## The Item Object\n\n<div class="two-up">\n<div class="left">\n\nItems don\'t have a pre-defined schema. The format depends completely on how you configured your collections and fields\nin Directus. For the sake of documentation, we\'ll use a fictional articles collection with the following fields: `id`,\n`status`, `title`, `body`, `featured_image`, and `author`.\n\n</div>\n<div class="right">\n\n```json\n{\n\t"id": 1,\n\t"status": "published",\n\t"title": "Hello, world!",\n\t"body": "This is my first article",\n\t"featured_image": "768eabec-3c54-4110-a6bb-64b548116661",\n\t"author": "0bc7b36a-9ba9-4ce0-83f0-0a526f354e07"\n}\n```\n\n</div>\n</div>\n\n---\n\n## Get Items\n\nList all items that exist in Directus.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n::: tip Nested Data\n\nThe [Field Parameter](/reference/api/query/#fields) is required to return nested relational data!\n\n:::\n\n### Returns\n\nAn array of up to [limit](/reference/api/query/#limit) [item objects](#the-item-object). If no items are available, data\nwill be an empty array.\n\n#### Singleton\n\nIf your collection is a singleton, this endpoint will return the item. If the item doesn\'t exist in the database, the\ndefault values will be returned.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nGET /items/:collection\nSEARCH /items/:collection\n```\n\n[Learn more about SEARCH ->](/reference/api/introduction/#search-http-method)\n\n##### Example\n\n```\nGET /items/articles\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Query {\n\t<collection>: [<collection>]\n}\n```\n\n##### Example\n\n```graphql\nquery {\n\tarticles {\n\t\tid\n\t\ttitle\n\t\tauthor {\n\t\t\tfirst_name\n\t\t}\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Get Item by ID\n\nGet an item that exists in Directus.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Returns\n\nReturns a [item object](#the-item-object) if a valid primary key was provided.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nGET /items/:collection/:id\n```\n\n##### Example\n\n```\nGET /items/articles/15\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Query {\n\t<collection>_by_id(id: ID!): <collection>\n}\n```\n\n##### Example\n\n```graphql\nquery {\n\tarticles_by_id(id: 15) {\n\t\tid\n\t\ttitle\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Create an Item\n\nCreate a new item in the given collection.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Request Body\n\nAn array of partial [item objects](#the-item-object).\n\n::: tip Nested Data (Relations)\n\nRelational data needs to be correctly nested to add new items successfully. Check out the\n[relational data section](/reference/api/introduction/#relational-data) for more information\n\n:::\n\n### Returns\n\nReturns the [item objects](#the-item-object) of the item that were created.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPOST /items/:collection\n```\n\n##### Example\n\n```\nPOST /items/articles\n```\n\n```json\n{\n\t"title": "Hello world!",\n\t"body": "This is our first article"\n}\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Mutation {\n\tcreate_<collection>_item(data: create_<collection>_input): <collection>\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tcreate_articles_item(data: { title: "Hello world!", body: "This is our first article" }) {\n\t\tid\n\t\ttitle\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Create Multiple Items\n\nCreate new items in the given collection.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Request Body\n\nAn array of partial [item objects](#the-item-object).\n\n### Returns\n\nReturns the [item objects](#the-item-object) of the item that were created.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPOST /items/:collection\n```\n\n##### Example\n\n```\nPOST /items/articles\n```\n\n```json\n[\n\t{\n\t\t"title": "Hello world!",\n\t\t"body": "This is our first article"\n\t},\n\t{\n\t\t"title": "Hello again, world!",\n\t\t"body": "This is our second article"\n\t}\n]\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Mutation {\n\tcreate_<collection>_items(data: [create_<collection>_input]): [<collection>]\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tcreate_articles_items(\n\t\tdata: [\n\t\t\t{ title: "Hello world!", body: "This is our first article" }\n\t\t\t{ title: "Hello again, world!", body: "This is our second article" }\n\t\t]\n\t) {\n\t\tid\n\t\ttitle\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Update an Item\n\nUpdate an existing item.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Request Body\n\nA partial [item object](#the-item-object).\n\n### Returns\n\nReturns the [item object](#the-item-object) of the item that was updated.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPATCH /items/:collection/:id\n```\n\n##### Example\n\n```\nPATCH /items/articles/15\n```\n\n```json\n{\n\t"title": "An updated title"\n}\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Mutation {\n\tupdate_<collection>_item(id: ID!, data: update_<collection>_input!): <collection>\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tupdate_articles_item(id: 15, data: { title: "An updated title" }) {\n\t\tid\n\t\ttitle\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Update Multiple Items\n\nUpdate multiple items at the same time.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nSupports all [global query parameters](/reference/api/query).\n\n### Request Body\n\nAn array of partial [item objects](#the-item-object).\n\n### Returns\n\nReturns the [item objects](#the-item-object) for the updated items.\n\n#### Singleton\n\nIf your collection is a singleton, this endpoint will act the same as the [Update an Item](#update-an-item) endpoint.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPATCH /items/:collection\n```\n\n##### Example\n\n```\nPATCH /items/articles\n```\n\n```json\n{\n\t"keys": [1, 2],\n\t"data": {\n\t\t"status": "published"\n\t}\n}\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Mutation {\n\tupdate_<collection>_items(ids: [ID!]!, data: [update_<collection>_input]): [<collection>]\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tupdate_articles_items(ids: [1, 2], data: { status: "published" }) {\n\t\tid\n\t\tstatus\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Delete an Item\n\nDelete an existing item.\n\n<div class="two-up">\n<div class="left">\n\n### Returns\n\nEmpty body.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nDELETE /items/:collection/:id\n```\n\n##### Example\n\n```\nDELETE /items/articles/15\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Mutation {\n\tdelete_<collection>_item(id: ID!): delete_one\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tdelete_articles_item(id: 15) {\n\t\tid\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Delete Multiple Items\n\nDelete multiple existing items.\n\n<div class="two-up">\n<div class="left">\n\n### Request Body\n\nAn array of item primary keys.\n\n### Returns\n\nEmpty body.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nDELETE /items/:collection\n```\n\n##### Example\n\n```\nDELETE /items/articles\n```\n\n```json\n[15, 16, 21]\n```\n\n### GraphQL\n\n```\nPOST /graphql\n```\n\n```graphql\ntype Mutation {\n\tdelete_<collection>_items(ids: [ID!]!): delete_many\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tdelete_articles_items(ids: [15, 16, 21]) {\n\t\tids\n\t}\n}\n```\n\n</div>\n</div>\n';export{n as default};
