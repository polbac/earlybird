var e='# Custom Modules <small></small>\n\n> Custom Modules are completely open-ended components that allow you to create new experiences within the Directus\n> platform. [Learn more about Modules](/concepts/modules/).\n\n## 1. Setup the Boilerplate\n\nEvery module is a standalone "package" that contains at least a metadata file and a Vue component. We recommend using\nthe following file structure:\n\n```\nsrc/\n\tindex.js\n\tmodule.vue\n```\n\n### src/index.js\n\n```js\nimport ModuleComponent from \'./module.vue\';\n\nexport default {\n\tid: \'custom\',\n\tname: \'Custom\',\n\ticon: \'box\',\n\troutes: [\n\t\t{\n\t\t\tpath: \'\',\n\t\t\tcomponent: ModuleComponent,\n\t\t},\n\t],\n};\n```\n\n- `id` — The unique key for this module. It is good practice to scope proprietary interfaces with an author prefix.\n- `name` — The human-readable name for this module.\n- `icon` — An icon name from the material icon set, or the extended list of Directus custom icons.\n- `routes` — Details the routes in your module. The routes are registered as nested routes with the module\'s `id`\n  serving as the base path.\n\n::: tip TypeScript\n\nSee\n[the TypeScript definition](https://github.com/directus/directus/blob/20355fee5eba514dd75565f60269311187010c66/app/src/modules/types.ts#L6-L17)\nfor more info on what can go into this object.\n\n:::\n\n### src/module.vue\n\n```vue\n<template>\n\t<private-view title="My Custom Module">Content goes here...</private-view>\n</template>\n\n<script>\nexport default {};\n<\/script>\n```\n\n#### Accessing the API from within your extension\n\nThe Directus App\'s Vue app instance provides a field called `system`, which can be injected into Vue components using\n[Vue\'s inject framework](https://v3.vuejs.org/guide/component-provide-inject.html). This `system` field contains\nfunctions to access Vuex stores, and more importantly, contains a property called `api`, which is an authenticated Axios\ninstance. Here\'s an example of how to use it:\n\n```vue\n<template>\n\t<private-view title="Example Collection List">\n\t\t<v-list>\n\t\t\t<v-list-item v-for="col in collections" v-bind:key="col.collection">\n\t\t\t\t{{ col.collection }}\n\t\t\t</v-list-item>\n\t\t</v-list>\n\t\t<v-button v-on:click="logToConsole">Log collections to console</v-button>\n\t</private-view>\n</template>\n\n<script>\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tcollections: null,\n\t\t};\n\t},\n\tmethods: {\n\t\tlogToConsole: function () {\n\t\t\tconsole.log(this.collections);\n\t\t},\n\t},\n\tinject: [\'system\'],\n\tmounted() {\n\t\t// log the system field so you can see what attributes are available under it\n\t\t// remove this line when you\'re done.\n\t\tconsole.log(this.system);\n\n\t\t// Get a list of all available collections to use with this module\n\t\tthis.system.api.get(\'/collections?limit=-1\').then((res) => {\n\t\t\tthis.collections = res.data.data;\n\t\t});\n\t},\n};\n<\/script>\n```\n\nIn the above example, you can see that:\n\n- The `system` field gets injected into the component and becomes available as an attribute of the component (ie\n  `this.system`)\n- When the component is mounted, it uses `this.system.api.get` to request a list of all available collections\n- The names of the collections are rendered into a list in the component\'s template\n- a button is added with a method the logs all the data for the collections to the console\n\nThis is just a basic example. A more efficient way to access and work with the list of collections would be to get an\ninstance of the `collectionsStore` using `system.useCollectionsStore()`, but that\'s beyond the scope of this guide\n\n#### Available Props\n\nIf you setup a route with a parameter, you can pass it in as a prop.\n\n## 2. Install Dependencies\n\nSet up a package.json file by running:\n\n```bash\nnpm init -y\n```\n\nTo be read by the Admin App, your custom module\'s Vue component must first be bundled into a single `index.js` file. We\nrecommend bundling your code using the directus-extension CLI from our `@directus/extension-sdk` package. The CLI\ninternally uses a Rollup configuration tailored specifically to bundling Directus extensions. To install the Extension\nSDK, run this command:\n\n```bash\nnpm i -D @directus/extension-sdk\n```\n\nFor the directus-extension CLI to recognize the extension type, the input path and the output path, add this field to\nthe root of the `package.json` file:\n\n```json\n"directus:extension": {\n\t"type": "module",\n\t"path": "dist/index.js",\n\t"source": "src/index.js",\n\t"host": "^9.0.0-rc.87",\n\t"hidden": false\n}\n```\n\n## 3. Develop Your Custom Module\n\nThe module itself is simply a Vue component, which provides an blank canvas for creating anything you need.\n\n## 4. Build and Deploy\n\nTo build the module for use within Directus, run:\n\n```bash\nnpx directus-extension build\n```\n\nFinally, move the output from your module\'s `dist` folder into your project\'s `/extensions/modules/my-custom-module`\nfolder. Keep in mind that the extensions directory is configurable within your env file, and may be located elsewhere.\n';export{e as default};
