var e='# Codebase Overview\n\n> **The core concepts behind Directus are simple, however the problems that must be solved to honor them can be\n> remarkably complex.** We strive to design and engineer the most elegant solutions possible, so that our codebase\n> remains accessible.\n\n## Monorepo\n\nThe primary Directus repository is located at [`directus/directus`](https://github.com/directus/directus) and houses the\nAdmin App (Vue.js 2 w/ Composition API), API (Node.js), project documentation (Markdown), API Specification (OpenAPI),\nand other smaller packages used internally. Directus follows a monorepo design similar to React or Babel â€” this page\nwill outline our monorepo\'s design and structure.\n\n## `/api`\n\nContains the Directus API (REST+GraphQL), written in Node.js.\n\n#### `/api/src/cli`\n\nThe CLI commands and matching functions that the `directus` package ships with.\n\n#### `/api/src/controllers`\n\nRoute handler controllers for the endpoints in the API.\n\n#### `/api/src/database`\n\nDatabase manipulation abstraction, system migrations, and system data. Also where you\'d find the main query runner.\n\n#### `/api/src/exceptions`\n\nClasses for the different errors the API is expected to throw. Used to set the HTTP status and error codes.\n\n#### `/api/src/mail`\n\nMail abstraction. Allows Directus to send emails. (Note: this is planned to be moved into a MailService. See below)\n\n#### `/api/src/middleware`\n\nVarious (express) routing middleware. Includes things like cache-checker, authenticator, etc.\n\n#### `/api/src/services`\n\nInternal services. The main abstraction for interfacing with the data in the database. Both GraphQL and REST requests\nare "translated" to use these services as the main logic in the platform.\n\n#### `/api/src/types`\n\nTypeScript types that are shared between the different parts of the API.\n\n#### `/api/src/utils`\n\nUtility functions\n\n## `/app`\n\nContains the Directus Admin App, written in Vue.js 2 w/ the Composition API.\n\n## `/app/public`\n\nAssets that are included with the app, but not bundled.\n\n#### `/app/src/assets`\n\nFiles that are included within the app. Are bundled / optimized in the build step.\n\n#### `/app/src/components`\n\n(Base) components that are used across the platform. Contains "basic building blocks" like button, input, etc.\n\n#### `/app/src/composables`\n\nReusable parts of reactive logic that can be used between Vue components. Includes things reactively calculating time\nfrom now, fetching a single item, etc.\n\n#### `/app/src/directives`\n\nCustom Vue directives (e.g. `v-tooltip`)\n\n#### `/app/src/interfaces`\n\nThe core-included interfaces.\n\n#### `/app/src/lang`\n\nTranslations abstraction, and language files. The language yaml files are maintained through\n[Crowdin](https://locales.directus.io)\n\n#### `/app/src/layouts`\n\nThe core-included layouts.\n\n#### `/app/src/modules`\n\nThe core-included modules.\n\n#### `/app/src/routes`\n\nThe routes in the app. Modules define their own routes, so this only includes the "system" things that don\'t belong to\nmodule, like login.\n\n#### `/app/src/stores`\n\n[Pinia](https://pinia.esm.dev) based stores used for global state tracking.\n\n#### `/app/src/styles`\n\nGlobal styles in the app. Every component has their own component styles, these are just the global styles.\n\n#### `/app/src/types`\n\nTypeScript types that are shared between the different parts of the API.\n\n#### `/app/src/utils`\n\nUtility functions used in various parts of the app.\n\n#### `/app/src/views`\n\nThe (two) main views used in the app: public / private. Also contains "internal" coupled components for those two views.\n\n## `/docs`\n\nContains all the platform\'s documentation, written in markdown with additional VuePress formatting.\n\n## `/packages`\n\nThe various sub-packages of the platform. Including the SDK, the file-storage adapters, title formatter, etc.\n\n## `/tests`\n\nTests are maintained on a per-package base. This folder contains the platform-wide (end-to-end) tests.\n';export{e as default};
