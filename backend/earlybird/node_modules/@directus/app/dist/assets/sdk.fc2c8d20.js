var n="# JavaScript SDK\n\n> The JS SDK provides an intuitive interface for the Directus API from within a JavaScript-powered project (browsers and\n> node.js). The default implementation uses [Axios](https://npmjs.com/axios) for transport and `localStorage` for\n> storing state.\n\n[[toc]]\n\n## Installation\n\n```bash\nnpm install @directus/sdk\n```\n\n## Usage\n\n```js\nimport { Directus } from '@directus/sdk';\n\nconst directus = new Directus('https://api.example.com/');\n```\n\n**NOTE** _All_ methods return promises. Make sure to await methods, for example:\n\n```js\nimport { Directus } from '@directus/sdk';\n\nconst directus = new Directus('https://api.example.com/');\n\n// Wait for login to be done...\nawait directus.auth.login({\n\temail: 'admin@example.com',\n\tpassword: 'password',\n});\n\n// ... before fetching items\nconst articles = await directus.items('articles').readMany();\n\nconsole.log({\n\titems: articles.data,\n\ttotal: articles.meta.total_count,\n});\n```\n\n## Global\n\n### Initialize\n\n```js\nimport { Directus } from '@directus/sdk';\n\nconst directus = new Directus('https://api.example.com/');\n```\n\n#### `url`\n\nThe constructor accepts the URL as the first parameter.\n\n#### `options.auth`\n\nThe authentication implementation. See [Auth](#auth) for more information.\n\nDefaults to an instance `Auth`.\n\n#### `options.storage`\n\nThe storage implementation. See [Storage](#storage) for more information.\n\nDefaults to an instance of `MemoryStorage` when in node.js, and `LocalStorage` when in browsers.\n\n**NOTE:**\n\nIf you plan to use multiple SDK instances at once, keep in mind that they will share the Storage across them, leading to\nunpredictable behaviors. This scenario might be a case while writing tests.\n\nFor example, the SDK instance that executed last the `login()` method writes the resulting `access_token` into the\nStorage and **overwrites** any prior fetched `access_token` from any other SDK instance. That might mix up your test\nscenario by granting false access rights to your previous logged-in users.\n\nAdding prefixes to your Storage instances would solve this error:\n\n```js\nimport { Directus, MemoryStorage } from '@directus/sdk';\nimport { randomBytes } from 'crypto';\n\n// ...\n\nconst prefix = randomBytes(8).toString('hex');\nconst storage = new MemoryStorage(prefix);\nconst url = `http://${host}:${port}`;\nconst directus = new Directus(url, { storage });\n```\n\n#### `options.transport`\n\nThe transport implementation. See [Transport](#transport) for more information.\n\nDefaults to an instance of `AxiosTransport`.\n\n### Example\n\n```js\nconst directus = new Directus('http://api.example.com/');\n```\n\n### Get / Set API URL\n\n```js\n// Get the API base URL\nconsole.log(directus.transport.url); // => https://api.example.com/\n\n// Set the API base URL\ndirectus.transport.url = 'https://api2.example.com';\n```\n\n### Access to transport/Axios\n\nYou can tap into the transport through `directus.transport`. If you are using the (default) `AxiosTransport`, you can\naccess axios through `directus.transport.axios`.\n\n#### Intercepting requests and responses\n\nAxios transport offers a wrapper around Axios interceptors to make it easy for you to inject/eject interceptors.\n\n```ts\nconst requestInterceptor = directus.transport.requests.intercept((config) => {\n\tconfig.headers['My-Custom-Header'] = 'Header value';\n\treturn config;\n});\n\n// If you don't want the interceptor anymore, remove it\nrequestInterceptor.eject();\n```\n\n```ts\nconst responseInterceptor = directus.transport.responses.intercept((response) => {\n\tconsole.log('Response received', { response });\n\treturn response;\n});\n\n// If you don't want the interceptor anymore, remove it\nresponseInterceptor.eject();\n```\n\n## Items\n\nYou can get an instance of the item handler by providing the collection (and type, in the case of TypeScript) to the\n`items` function. The following examples will use the `Article` type.\n\n> JavaScript\n\n```js\n// import { Directus, ID } from '@directus/sdk';\nconst { Directus } = require('@directus/sdk');\n\nconst directus = new Directus('https://api.example.com');\n\nconst articles = directus.items('articles');\n```\n\n> TypeScript\n\n```ts\nimport { Directus, ID } from '@directus/sdk';\n\n// Map your collection structure based on its fields.\ntype Article = {\n\tid: ID;\n\ttitle: string;\n\tbody: string;\n\tpublished: boolean;\n};\n\n// Map your collections to its respective types. The SDK will\n// infer its types based on usage later.\ntype MyBlog = {\n\t// [collection_name]: typescript_type\n\tarticles: Article;\n\n\t// You can also extend Directus collection. The naming has\n\t// to match a Directus system collection and it will be merged\n\t// into the system spec.\n\tdirectus_users: {\n\t\tbio: string;\n\t};\n};\n\n// Let the SDK know about your collection types.\nconst directus = new Directus<MyBlog>('https://directus.myblog.com');\n\n// typeof(article) is a partial \"Article\"\nconst article = await directus.items('articles').readOne(10);\n\n// Error TS2322: \"hello\" is not assignable to type \"boolean\".\n// post.published = 'hello';\n```\n\n### Create Single Item\n\n```js\nawait articles.createOne({\n\ttitle: 'My New Article',\n});\n```\n\n### Create Multiple Items\n\n```js\nawait articles.createMany([\n\t{\n\t\ttitle: 'My First Article',\n\t},\n\t{\n\t\ttitle: 'My Second Article',\n\t},\n]);\n```\n\n### Read All\n\n```js\nawait articles.readMany();\n```\n\n### Read By Query\n\n```js\nawait articles.readMany({\n\tsearch: 'Directus',\n\tfilter: {\n\t\tdate_published: {\n\t\t\t_gte: '$NOW',\n\t\t},\n\t},\n});\n```\n\n### Read By Primary Key(s)\n\n```js\nawait articles.readOne(15);\n```\n\nSupports optional query:\n\n```js\nawait articles.readOne(15, { fields: ['title'] });\n```\n\n### Update Multiple Items\n\n```js\nawait articles.updateMany([15, 42], {\n\ttitle: 'Both articles now have the same title',\n});\n```\n\nSupports optional query:\n\n```js\nawait articles.updateMany(\n\t[15, 42],\n\t{\n\t\ttitle: 'Both articles now have the same title',\n\t},\n\t{\n\t\tfields: ['title'],\n\t}\n);\n```\n\n### Delete\n\n```js\n// One\nawait articles.deleteOne(15);\n\n// Multiple\nawait articles.deleteMany([15, 42]);\n```\n\n## Activity\n\n### Read All Activity\n\n```js\nawait directus.activity.readMany();\n```\n\n### Read Activity By Query\n\n```js\nawait directus.activity.readMany({\n\tfilter: {\n\t\taction: {\n\t\t\t_eq: 'create',\n\t\t},\n\t},\n});\n```\n\n### Read Activity By Primary Key(s)\n\n```js\nawait directus.activity.readOne(15);\n```\n\nSupports optional query:\n\n```js\nawait directus.activity.readOne(15, { fields: ['action'] });\n```\n\n### Create a Comment\n\n```js\nawait directus.activity.comments.create({\n\tcollection: 'articles',\n\titem: 15,\n\tcomment: 'Hello, world!',\n});\n```\n\n### Update a comment\n\n```js\nawait directus.activity.comments.update(31, {\n\tcomment: 'Howdy, world!',\n});\n```\n\nNote: The passed key is the primary key of the comment\n\n### Delete a comment\n\n```js\nawait directus.activity.comments.delete(31);\n```\n\nNote: The passed key is the primary key of the comment\n\n## Auth\n\n### Configuration\n\nDirectus will accept custom implementations of the `IAuth` interface. The default implementation `Auth` can be imported\nfrom `@directus/sdk`. The default implementation will require you to pass the transport and storage implementations. All\noptions are optional.\n\n```js\nimport { Auth } from '@directus/sdk';\n\n// ...\n\nconst sdk = new Directus('url', {\n\tauth: new Auth(transport, storage, options);\n\t// ...\n});\n```\n\n#### transport\n\nThe transport responsible for communicating with Directus backend.\n\nDefaults to an instance of `AxiosTransport` when not creating `Auth` youself.\n\n#### storage\n\nThe storage responsible for storing authentication and sdk state.\n\nWhen not creating `Auth` youself, defaults to `MemoryStorage` in node.js, and `LocalStorage` in browsers.\n\n#### options\n\n##### options.mode\n\nAccepts `cookie` or `json`.\n\nWhen in `cookie` mode, the API will set the refresh token in an `httpOnly` secure cookie that can't be accessed from\nclient side JavaScript. This is the most secure way to connect to the API from a public front-end website.\n\nWhen you can't rely on cookies, or need more control over handling the storage of the cookie (like in node.js), use\n`json` mode. This will return the refresh token in the \"normal\" payload. The storage of these tokens are handled by the\n`storage` implementation.\n\nDefaults to `cookie` in browsers, `json` in node.js.\n\n##### options.refresh\n\nSee [Refresh auth token](#refresh-auth-token).\n\n### Get current token\n\n```ts\nconst token = directus.auth.token;\n```\n\n### Login\n\n#### With credentials\n\n```js\nawait directus.auth.login({\n\temail: 'admin@example.com',\n\tpassword: 'd1r3ctu5',\n});\n```\n\n#### With static tokens\n\n```js\nawait directus.auth.static('static_token');\n```\n\n#### Refresh auth token\n\nYou can set authentication to auto-refresh the token once it's close to expire.\n\n```js\nawait directus.auth.login(\n\t{\n\t\temail: 'admin@example.com',\n\t\tpassword: 'd1r3ctu5',\n\t},\n\t{\n\t\trefresh: {\n\t\t\tauto: true,\n\t\t},\n\t}\n);\n```\n\nYou can also set how much time before the expiration you want to auto-refresh the token. When not specified, 30 sec is\nthe default time.\n\n```js\nawait directus.auth.login(\n\t{\n\t\temail: 'admin@example.com',\n\t\tpassword: 'd1r3ctu5',\n\t},\n\t{\n\t\trefresh: {\n\t\t\tauto: true,\n\t\t\ttime: 30000, // refesh the token 30 secs before the expiration\n\t\t},\n\t}\n);\n```\n\n### Refresh Auth Token\n\nYou can manually refresh the authentication token. This won't try to refresh the token if it's still valid in the eyes\nof the SDK.\n\nAlso worth mentioning that any concurrent refreshes (trying to refresh while a there's an existing refresh running),\nwill result in only a single refresh hitting the server, and promises resolving/rejecting with the result from the first\ncall. This depends on the implementation of IAuth you're using.\n\n```js\nawait directus.auth.refresh();\n```\n\nYou can force the refresh by passing true in the first parameter.\n\nAn optional parameter will accept auto-refresh information.\n\n```js\nawait directus.auth.refresh(true);\n```\n\nThis function can either return the `AuthResult` in case a refresh was made, `false` in case SDK thinks it's not needed,\nor throw an error in case refresh fails.\n\n### Logout\n\n```js\nawait directus.auth.logout();\n```\n\n### Request a Password Reset\n\n```js\nawait directus.auth.password.request('admin@example.com');\n```\n\n### Reset a Password\n\n```js\nawait directus.auth.password.reset('abc.def.ghi', 'n3w-p455w0rd');\n```\n\nNote: The token passed in the first parameter is sent in an email to the user when using `request()`\n\n## Transport\n\nThe transport object abstracts how you communicate with Directus. Transports can be customized to use different HTTP\nlibraries for example.\n\n### Interface\n\n```ts\n// Simplified version, `import { ITransport } from '@directus/sdk';`\ninterface ITransport {\n\turl;\n\tget(path);\n\thead(path);\n\toptions(path);\n\tdelete(path, data = undefined);\n\tpost(path, data);\n\tput(path, data);\n\tpatch(path, data);\n}\n```\n\n### AxiosTransport\n\nThe default transport used in both browser and node deployments. It supports auto refresh on request.\n\n#### Options\n\nAxiosTransport requires a base URL and a storage implementation to work.\n\n```ts\nconst transport = new AxiosTransport('http://example.com', new MemoryStorage(), async () => {\n\tawait sdk.auth.refresh();\n});\nawait transport.get('/server/info');\n```\n\n## Storage\n\nThe storage is used to load and save SDK data.\n\n### LocalStorage\n\nThe storage used in environments where Local Storage is supported.\n\n#### Options\n\nThe `LocalStorage` implementation accepts a _transparent_ prefix. Use this when you need multiple SDK instances with\nindependent authentication for example.\n\n### MemoryStorage\n\nThe storage used when SDK data is ephemeral. For example: only during the lifecycle of the process.\n\n#### Options\n\nThe `MemoryStorage` implementation accepts a _transparent_ prefix so you can have multiple instances of the SDK without\nhaving clashing keys.\n\n## Collections\n\n```js\ndirectus.collections;\n```\n\nSame methods as `directus.items(\"directus_collections\")`.\n\n## Fields\n\n```js\ndirectus.fields;\n```\n\nSame methods as `directus.items(\"directus_fields\")`.\n\n## Files\n\n```js\ndirectus.files;\n```\n\nSame methods as `directus.items(\"directus_files\")`.\n\n## Folders\n\n```js\ndirectus.folders;\n```\n\nSame methods as `directus.items(\"directus_folders\")`.\n\n## Permissions\n\n```js\ndirectus.permissions;\n```\n\nSame methods as `directus.items(\"directus_permissions\")`.\n\n## Presets\n\n```js\ndirectus.presets;\n```\n\nSame methods as `directus.items(\"directus_presets\")`.\n\n## Relations\n\n```js\ndirectus.relations;\n```\n\nSame methods as `directus.items(\"directus_relations\")`.\n\n## Revisions\n\n```js\ndirectus.revisions;\n```\n\nSame methods as `directus.items(\"directus_revisions\")`.\n\n## Roles\n\n```js\ndirectus.roles;\n```\n\nSame methods as `directus.items(\"directus_roles\")`.\n\n## Settings\n\n```js\ndirectus.settings;\n```\n\nSame methods as `directus.items(\"directus_settings\")`.\n\n## Server\n\n### Ping the Server\n\n```js\nawait directus.server.ping();\n```\n\n### Get Server/Project Info\n\n```js\nawait directus.server.info();\n```\n\n## Users\n\n```js\ndirectus.users;\n```\n\nSame methods as `directus.items(\"directus_users\")`, and:\n\n### Invite a New User\n\n```js\nawait directus.users.invites.send('admin@example.com', 'fe38136e-52f7-4622-8498-112b8a32a1e2');\n```\n\nThe second parameter is the role of the user\n\n### Accept a User Invite\n\n```js\nawait directus.users.invites.accept('<accept-token>', 'n3w-p455w0rd');\n```\n\nThe provided token is sent to the user's email\n\n### Enable Two-Factor Authentication\n\n```js\nawait directus.users.tfa.enable('my-password');\n```\n\n### Disable Two-Factor Authentication\n\n```js\nawait directus.users.tfa.disable('691402');\n```\n\n### Get the Current User\n\n```js\nawait directus.users.me.read();\n```\n\nSupports optional query:\n\n```js\nawait directus.users.me.read({\n\tfields: ['last_access'],\n});\n```\n\n### Update the Current Users\n\n```js\nawait directus.users.me.update({ first_name: 'Admin' });\n```\n\nSupports optional query:\n\n```js\nawait directus.users.me.update({ first_name: 'Admin' }, { fields: ['last_access'] });\n```\n\n## Utils\n\n### Get a Random String\n\n```js\nawait directus.utils.random.string();\n```\n\nSupports an optional `length` (defaults to 32):\n\n```js\nawait directus.utils.random.string(50);\n```\n\n### Generate a Hash for a Given Value\n\n```js\nawait directus.utils.hash.generate('My String');\n```\n\n### Verify if a Hash is Valid\n\n```js\nawait directus.utils.hash.verify('My String', '$argon2i$v=19$m=4096,t=3,p=1$A5uogJh');\n```\n\n### Sort Items in a Collection\n\n```js\nawait directus.utils.sort('articles', 15, 42);\n```\n\nThis will move item `15` to the position of item `42`, and move everything in between one \"slot\" up.\n\n### Revert to a Previous Revision\n\n```js\nawait directus.utils.revert(451);\n```\n\nNote: The key passed is the primary key of the revision you'd like to apply.\n\n---\n\n## TypeScript\n\nIf you are using TypeScript, the JS-SDK requires TypeScript 3.8 or newer. TypeScript will also improve the development\nexperience by providing relevant information when manipulating your data. For example, `directus.items` knows about your\ncollection types if you feed the SDK with enough information in the construction of the SDK instance. This allows for a\nmore detailed IDE suggestions for return types, sorting, and filtering.\n\n```ts\ntype BlogPost = {\n\tid: ID;\n\ttitle: string;\n};\n\ntype BlogSettings = {\n\tdisplay_promotions: boolean;\n};\n\ntype MyCollections = {\n\tposts: BlogPost;\n\tsettings: BlogSettings;\n};\n\n// This is how you feed custom type information to Directus.\nconst directus = new Directus<MyCollections>('http://url');\n\n// ...\n\nconst post = await directus.items('posts').readOne(1);\n// typeof(post) is a partial BlogPost object\n\nconst settings = await posts.singleton('settings').read();\n// typeof(settings) is a partial BlogSettings object\n```\n\nYou can also extend the Directus system type information by providing type information for system collections as well.\n\n```ts\nimport { Directus } from '@directus/sdk';\n\n// Custom fields added to Directus user collection.\ntype UserType = {\n\tlevel: number;\n\texperience: number;\n};\n\ntype CustomTypes = {\n\t/*\n\tThis type will be merged with Directus user type.\n\tIt's important that the naming matches a directus\n\tcollection name exactly. Typos won't get caught here\n\tsince SDK will assume it's a custom user collection.\n\t*/\n\tdirectus_users: UserType;\n};\n\nconst directus = new Directus<CustomTypes>('https://api.example.com');\n\nawait directus.auth.login({\n\temail: 'admin@example.com',\n\tpassword: 'password',\n});\n\nconst me = await directus.users.me.read();\n// typeof me = partial DirectusUser & UserType;\n\n// OK\nme.level = 42;\n\n// Error TS2322: Type \"string\" is not assignable to type \"number\".\nme.experience = 'high';\n```\n";export{n as default};
