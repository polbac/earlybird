var n='---\npageClass: page-reference\n---\n\n# Relations\n\n<div class="two-up">\n<div class="left">\n\n> What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever\n> other structures you can think of. [Learn more about Relationships](/concepts/relationships/).\n\n</div>\n<div class="right">\n\n[[toc]]\n\n</div>\n</div>\n\n---\n\n## The Relation Object\n\n<div class="two-up">\n<div class="left">\n<div class="definitions">\n\n`collection` **string**\\\nName of the collection. This matches the table name in the database.\n\n`field` **string**\\\nName of the field that holds the related primary key. This matches the column name in the database.\n\n`related_collection` **string**\\\nName of the related collection. This matches the table name in the database.\n\n</div>\n\n#### Meta\n\nDirectus metadata. Used to enable non-database relationship types\n\n<div class="definitions">\n\n`id` **integer**\\\nPrimary key of the metadata row in `directus_relations`.\n\n`many_collection` **string**\\\nName of the collection. Matches the top level `collection` field.\n\n`many_field` **string**\\\nName of the field. Matches the top level `field` field.\n\n`one_collection` **string**\\\nName of the related collection. Matches the top level `related_collection` field.\n\n`one_field` **string**\\\nName of the one to many field on the other side of the relation.\n\n`one_allowed_collections` **string**\\\nWhat collections are allowed to be used in a many-to-any context.\n\n`one_collection_field` **string**\\\nField that holds the collection name in a many-to-any context.\n\n`one_deselect_action` **nullify | delete**\\\nWhether to nullify or delete related one-to-many records.\n\n`sort_field` **string**\\\nWhat field is used to hold the sort field.\n\n`junction_field` **string**\\\nWhat field connects two relations in a many-to-many (o2m-m2o) context.\n\n</div>\n\n#### Schema\n\n"Raw" database information. Based on the database vendor used, different information might be returned. The following\nare available for all drivers.\n\n<div class="definitions">\n\n`table` **string**\\\nThe table name.\n\n`column` **string**\\\nThe column name.\n\n`foreign_key_table` **string**\\\nRelated table name.\n\n`foreign_key_column` **string**\\\nRelated column name.\n\n`constraint_name` **string**\\\nName for the foreign key constraint.\n\n`on_update` **string**\\\nUpdate trigger for the foreign key constraint.\n\n`on_delete` **string**\\\nDelete trigger for the foreign key constraint.\n\n</div>\n</div>\n<div class="right">\n\n```json\n{\n\t"collection": "about_us",\n\t"field": "logo",\n\t"related_collection": "directus_files",\n\t"schema": {\n\t\t"table": "about_us",\n\t\t"column": "logo",\n\t\t"foreign_key_table": "directus_files",\n\t\t"foreign_key_column": "id",\n\t\t"constraint_name": "about_us_logo_foreign",\n\t\t"on_update": "NO ACTION",\n\t\t"on_delete": "SET NULL"\n\t},\n\t"meta": {\n\t\t"id": 1,\n\t\t"junction_field": null,\n\t\t"many_collection": "about_us",\n\t\t"many_field": "logo",\n\t\t"one_allowed_collections": null,\n\t\t"one_collection": "directus_files",\n\t\t"one_collection_field": null,\n\t\t"one_deselect_action": "nullify",\n\t\t"one_field": null,\n\t\t"sort_field": null\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## List relations\n\nList all relations that exist in Directus.\n\n<div class="two-up">\n<div class="left">\n\n::: tip Permissions\n\nThe data returned in this endpoint will be filtered based on the user\'s permissions. For example, relations that apply\nto a collection that the current user doesn\'t have access to are stripped out.\n\n:::\n\n### Query Parameters\n\nDoesn\'t support any query parameters.\n\n### Returns\n\nArray of [relation objects](#the-relation-object). If no items are available, data will be an empty array.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nGET /relations\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Query {\n\trelations: [directus_relations]\n}\n```\n\n##### Example\n\n```graphql\nquery {\n\trelations {\n\t\tcollection\n\t\tfield\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## List relations in collection\n\nList all relations that exist in a given collection.\n\n<div class="two-up">\n<div class="left">\n\n::: tip Permissions\n\nThe data returned in this endpoint will be filtered based on the user\'s permissions. For example, relations that apply\nto a collection that the current user doesn\'t have access to are stripped out.\n\n:::\n\n### Query Parameters\n\nDoesn\'t support any query parameters.\n\n### Returns\n\nArray of [relation objects](#the-relation-object). If no items are available, data will be an empty array.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nGET /relations/:collection\n```\n\n##### Example\n\n```\nGET /relations/articles\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Query {\n\trelations_in_collection(collection: String!): [directus_relations]\n}\n```\n\n##### Example\n\n```graphql\nquery {\n\trelations_in_collection(collection: "articles") {\n\t\tcollection\n\t\tfield\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Retrieve a relation\n\nList an existing relation by collection/field name.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nDoesn\'t support any query parameters.\n\n### Returns\n\nReturns the requested [relation object](#the-relation-object).\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nGET /relations/:collection/:field\n```\n\n##### Example\n\n```\nGET /relations/articles/featured_image\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Query {\n\trelations_by_name(collection: String!, field: String!): directus_relations\n}\n```\n\n##### Example\n\n```graphql\nquery {\n\trelations_by_name(collection: "articles", field: "featured_image") {\n\t\tcollection\n\t\tfield\n\t\trelated_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Create a Relation\n\nCreate a new relation.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nDoesn\'t support any query parameters.\n\n### Request Body\n\nA partial [relation object](#the-relation-object).\n\n### Returns\n\nReturns the [relation object](#the-relation-object) for the created relation.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPOST /relations\n```\n\n##### Example\n\n```json\n// POST /relations\n\n{\n\t"collection": "articles",\n\t"field": "featured_image",\n\t"related_collection": "directus_files"\n}\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tcreate_relations_item(data: create_directus_relations_input!): directus_relations\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tcreate_relations_item(\n\t\tdata: { collection: "articles", field: "featured_image", related_collection: "directus_files" }\n\t) {\n\t\tcollection\n\t\tfield\n\t\trelated_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Update a Relation\n\nUpdate an existing relation.\n\n<div class="two-up">\n<div class="left">\n\n### Query Parameters\n\nDoesn\'t support any query parameters.\n\n### Request Body\n\nA partial [relation object](#the-relation-object).\n\n### Returns\n\nReturns the [relation object](#the-relation-object) for the created relation.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nPATCH /relations/:collection/:field\n```\n\n##### Example\n\n```json\n// PATCH /relations/articles/author\n\n{\n\t"meta": {\n\t\t"one_field": "articles"\n\t}\n}\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tupdate_relations_item(collection: String!, field: String!, data: update_directus_relations_input!): directus_relations\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tupdate_relations_item(collection: "articles", field: "author", data: { meta: { one_field: "articles" } }) {\n\t\tcollection\n\t\tfield\n\t\trelated_collection\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Delete a Relation\n\nDelete an existing relation.\n\n<div class="two-up">\n<div class="left">\n\n### Returns\n\nEmpty body.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\nDELETE /relations/:collection/:field\n```\n\n##### Example\n\n```\nDELETE /relations/articles/author\n```\n\n### GraphQL\n\n```\nPOST /graphql/system\n```\n\n```graphql\ntype Mutation {\n\tdelete_relations_item(collection: String!, field: String!): delete_one\n}\n```\n\n##### Example\n\n```graphql\nmutation {\n\tdelete_relations_item(collection: "articles", field: "author") {\n\t\tcollection\n\t\tfield\n\t}\n}\n```\n\n</div>\n</div>\n';export{n as default};
