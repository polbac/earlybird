var e="# Installing with Docker\n\nDirectus is published to both [DockerHub](https://hub.docker.com/r/directus/directus) and\n[GitHub Packages](https://github.com/orgs/directus/packages/container/package/directus) under `directus/directus`. To\nuse the Directus image from DockerHub, run:\n\n```bash\ndocker run -p 8055:8055 directus/directus\n```\n\n### Installing Specific Versions\n\nEach released version is available under its own tag (e.g. 9.0.0-rc.85). To use a specific version of Directus, run:\n\n```bash\ndocker run -p 8055:8055 directus/directus:9.0.0-rc.85\n```\n\n::: warning Change In Naming of Docker Tags\n\nBefore 9.0.0-rc.84 the Docker tags were prefixed by a \"v\" - e.g. v9.0.0-rc.83.\n\n:::\n\n### Create admin user using docker\n\nThe published Docker image will automatically populate the database, and create a user. To configure the email/password\nfor this first user, pass the following env vars:\n\n```bash\nADMIN_EMAIL=\"admin@example.com\"\nADMIN_PASSWORD=\"d1r3ctu5\"\n```\n\n## Persistence\n\nContainers are ephemeral, and this means that whenever you stop a container, all the data associated with it is going to\nbe removed [unless you persist them](https://docs.docker.com/storage/) when creating your container.\n\nDirectus image by default\n[will use the following locations](https://github.com/directus/directus/blob/main/.github/actions/build-images/rootfs/directus/images/main/Dockerfile#L93-L96)\nfor data persistence (note that these can be changed through environment variables)\n\n- `/directus/uploads` for uploads\n- `/directus/database` (only when using SQLite and not configured to a different folder)\n- `/directus/extensions` for extension loadings\n\n## Docker Compose\n\nWhen using Docker compose, you can use the following setup to get you started - make sure to change all sensitive values\n(`SECRET`, `DB_PASSWORD`, ...) in production:\n\n```yaml\nversion: '3'\nservices:\n  database:\n    container_name: database\n    image: postgres:12\n    volumes:\n      - ./data/database:/var/lib/postgresql/data\n    networks:\n      - directus\n    environment:\n      POSTGRES_USER: 'directus'\n      POSTGRES_PASSWORD: 'directus'\n      POSTGRES_DB: 'directus'\n\n  cache:\n    container_name: cache\n    image: redis:6\n    networks:\n      - directus\n\n  directus:\n    container_name: directus\n    image: directus/directus:latest\n    ports:\n      - 8055:8055\n    volumes:\n      # By default, uploads are stored in /directus/uploads\n      # Always make sure your volumes matches the storage root when using\n      # local driver\n      - ./uploads:/directus/uploads\n      # Make sure to also mount the volume when using SQLite\n      # - ./database:/directus/database\n      # If you want to load extensions from the host\n      # - ./extensions:/directus/extensions\n    networks:\n      - directus\n    depends_on:\n      - cache\n      - database\n    environment:\n      KEY: '255d861b-5ea1-5996-9aa3-922530ec40b1'\n      SECRET: '6116487b-cda1-52c2-b5b5-c8022c45e263'\n\n      DB_CLIENT: 'pg'\n      DB_HOST: 'database'\n      DB_PORT: '5432'\n      DB_DATABASE: 'directus'\n      DB_USER: 'directus'\n      DB_PASSWORD: 'directus'\n\n      CACHE_ENABLED: 'true'\n      CACHE_STORE: 'redis'\n      CACHE_REDIS: 'redis://cache:6379'\n\n      ADMIN_EMAIL: 'admin@example.com'\n      ADMIN_PASSWORD: 'd1r3ctu5'\n\n      # Make sure to set this in production\n      # (see https://docs.directus.io/reference/environment-variables/#general)\n      # PUBLIC_URL: 'https://directus.example.com'\n\nnetworks:\n  directus:\n```\n\n### Updating with Docker Compose\n\nIf you are not using the `latest` tag for directus you need to adjust your `docker-compose.yml` file to increment the tag version number, e.g.\n\n```\n-   image: directus/directus:9.0.0-rc.89\n+   image: directus/directus:9.0.0-rc.90\n```\n\nYou can then issue the following two commands (from your docker-compose root):\n\n```\ndocker-compose pull\ndocker-compose up -d\n```\n\nThe images will be pulled and the containers recreated. Migrations will happen automatically so once the containers have started you will be on the newest version (or the version you specified).\n\n## Supported Databases\n\nThe Directus Docker Image contains all optional dependencies supported in the API. This means the Docker image can be\nused with most of the supported databases and storage adapters without having to create a custom image.\n\n::: warning OracleDB\n\nOracleDB's Node client (`node-oracledb`) requires a couple more native dependencies, and specific configurations in\norder to run. The official Directus Docker image does not include these dependencies. See\n[https://blogs.oracle.com/opal/dockerfiles-for-node-oracledb-are-easy-and-simple](https://blogs.oracle.com/opal/dockerfiles-for-node-oracledb-are-easy-and-simple)\nfor more information on what to include for OracleDB.\n\n:::\n";export{e as default};
