var e='# Custom Interfaces <small></small>\n\n> Custom Interfaces allow you to create new ways of viewing or interacting with field data on the Item Detail page.\n> [Learn more about Interfaces](/concepts/interfaces/).\n\n## 1. Setup the Boilerplate\n\nEvery interface is a standalone "package" that contains at least a metadata file and a Vue component. We recommend using\nthe following file structure:\n\n```\nsrc/\n\tindex.js\n\tinterface.vue\n```\n\n### src/index.js\n\n```js\nimport InterfaceComponent from \'./interface.vue\';\n\nexport default {\n\tid: \'custom\',\n\tname: \'Custom\',\n\tdescription: \'This is my custom interface!\',\n\ticon: \'box\',\n\tcomponent: InterfaceComponent,\n\ttypes: [\'string\'],\n};\n```\n\n- `id` — The unique key for this interface. It is good practice to scope proprietary interfaces with an author prefix.\n- `name` — The human-readable name for this interface.\n- `description` — A short description (<80 characters) of this interface shown in the App.\n- `icon` — An icon name from the material icon set, or the extended list of Directus custom icons.\n- `component` — A reference to your Vue component.\n- `types` — An array of supported [types](/concepts/types/).\n- `groups` — An array of field-groups. Accepts `standard`, `file`, `files`, `m2o`, `o2m`, `m2a`, `translations`.\n  Defaults to `standard`.\n\n::: tip TypeScript\n\nSee\n[the TypeScript definition](https://github.com/directus/directus/blob/20355fee5eba514dd75565f60269311187010c66/app/src/interfaces/types.ts#L5-L18)\nfor more info on what can go into this object.\n\n:::\n\n### src/interface.vue\n\n```vue\n<template>\n\t<input :value="value" @input="handleChange($event.target.value)" />\n</template>\n\n<script>\nexport default {\n\temits: [\'input\'],\n\tprops: {\n\t\tvalue: String,\n\t},\n\tmethods: {\n\t\thandleChange(value) {\n\t\t\tthis.$emit(\'input\', value);\n\t\t},\n\t},\n};\n<\/script>\n```\n\n#### Available Props\n\n- `value` — The value of the field.\n- `width` — The layout width of the field. Either `half`, `half-right`, `full`, or `fill`.\n- `type` — The type of the field.\n- `collection` — The collection name of the field.\n- `field` — The key of the field.\n- `primaryKey` — The current item\'s primary key.\n\n## 2. Install Dependencies\n\nSet up a package.json file by running:\n\n```bash\nnpm init -y\n```\n\nTo be read by the Admin App, your custom interface\'s Vue component must first be bundled into a single `index.js` file.\nWe recommend bundling your code using the directus-extension CLI from our `@directus/extension-sdk` package. The CLI\ninternally uses a Rollup configuration tailored specifically to bundling Directus extensions. To install the Extension\nSDK, run this command:\n\n```bash\nnpm i -D @directus/extension-sdk\n```\n\nFor the directus-extension CLI to recognize the extension type, the input path and the output path, add this field to\nthe root of the `package.json` file:\n\n```json\n"directus:extension": {\n\t"type": "interface",\n\t"path": "dist/index.js",\n\t"source": "src/index.js",\n\t"host": "^9.0.0-rc.87",\n\t"hidden": false\n}\n```\n\n## 3. Develop your Custom Interface\n\nThe interface itself is simply a Vue component, which provides an blank canvas for creating anything you need.\n\n## 4. Build and Deploy\n\nTo build the interface for use within Directus, run:\n\n```bash\nnpx directus-extension build\n```\n\nFinally, move the output from your interface\'s `dist` folder into your project\'s\n`/extensions/interfaces/my-custom-interface` folder. Keep in mind that the extensions directory is configurable within\nyour env file, and may be located elsewhere.\n';export{e as default};
