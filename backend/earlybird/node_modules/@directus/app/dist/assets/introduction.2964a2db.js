var e='# API Reference\n\n> Directus offers both a RESTful and GraphQL API to manage the data in the database. The API has predictable\n> resource-oriented URLs, relies on standard HTTP status codes, and uses JSON for input and output.\n\n::: tip Dynamic I/O\n\nSince most endpoints return data based on your specific schema and configured permissions, the input/output of the API\ndiffers greatly for individual installations.\n\n:::\n\n[[toc]]\n\n## REST vs. GraphQL\n\n**There is no difference in the functionality available between the REST and GraphQL endpoints.** The functionality\navailable in both is mapped to same set of core services, meaning that you don\'t lose any performance or capabilities by\nchoosing one or the other.\n\nWhich one you choose is ultimately up to you.\n\n## Authentication\n\nBy default, all data in the system is off limits for unauthenticated users. To gain access to protected data, you must\n[include an access token with every request](/reference/api/authentication/), or\n[configure permissions for the public role](/concepts/roles/#public-role).\n\nUseful references:\n\n- [Authenticating into the API](/reference/api/authentication/)\n- [Login endpoint reference](/reference/api/system/authentication/)\n\n## Relational Data\n\nDirectus only retrieves the fields in your items that explicitly have been requested. Relational data can be retrieved\nnested by using the [the `fields` parameter](/reference/api/query/#fields) in REST, or regular nested queries in\nGraphQL. This allows you to retrieve the author of your article included in the articles data, or fetch related log\nentry points for your app\'s analytics data for example.\n\n### Creating / Updating / Deleting\n\nSimilarly to fetching, relational content can be modified deeply as well.\n\n#### Many-to-One\n\nMany-to-One relationships are fairly straightforward to manage relationally. You can simply submit the changes you want\nas an object under the relational key in your collection. For example, if you wanted to create a new featured article on\nyour page, you could submit:\n\n```json\n{\n\t"featured_article": {\n\t\t"title": "This is my new article!"\n\t}\n}\n```\n\nThis will create a new record in the related collection, and save its primary key in the `featured_article` field for\nthis item. To update an existing item, simply provide the primary key with the updates, and Directus will treat it as an\nupdate instead of a creation:\n\n```json\n{\n\t"featured_article": {\n\t\t"id": 15,\n\t\t"title": "This is an updated title for my article!"\n\t}\n}\n```\n\nSeeing that the Many-to-One relationship stores the foreign key on the field itself, removing the item can be done by\nnullifying the field:\n\n```json\n{\n\t"featured_article": null\n}\n```\n\n#### One-to-Many (/ Many-to-Many)\n\nOne-to-Many, and therefore Many-to-Many and Many-to-Any, relationships can be updated in one of two ways:\n\n**Basic**\n\nThe API will return one-to-many fields as an array of nested keys or items (based on the `fields` parameter). You can\nuse this same structure to select what the related items are:\n\n```json\n{\n\t"children": [2, 7, 149]\n}\n```\n\nYou can also provide an object instead of a primary key in order to create new items nested on the fly, or an object\nwith a primary key included to update an existing item:\n\n```json\n{\n\t"children": [\n\t\t2, // assign existing item 2 to be a child of the current item\n\t\t{\n\t\t\t"name": "A new nested item"\n\t\t},\n\t\t{\n\t\t\t"id": 149,\n\t\t\t"name": "Assign and update existing item 149"\n\t\t}\n\t]\n}\n```\n\nTo remove items from this relationship, simply omit them from the array:\n\n```json\n{\n\t"children": [2, 149]\n}\n```\n\nThis method of updating a one-to-many is very useful for smaller relational datasets.\n\n**"Detailed"**\n\nAlternatively, you can provide an object detailing the changes as follows:\n\n```json\n{\n\t"children": {\n\t\t"create": [{ "name": "A new nested item" }],\n\t\t"update": [{ "id": 149, "name": "A new nested item" }],\n\t\t"delete": [7]\n\t}\n}\n```\n\nThis is useful if you need to have more tightly control on staged changes, or when you\'re working with a big relational\ndataset.\n\n#### Many-to-Any (Union Types)\n\nMany-to-Any fields work very similar to a "regular" many-to-many, with the exception that the related field can pull in\nthe fields from any of the related collections, for example:\n\n```json\n{\n\t"sections": [\n\t\t{\n\t\t\t"collection": "headings",\n\t\t\t"item": {\n\t\t\t\t/* headings fields */\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t"collection": "paragraphs",\n\t\t\t"item": {\n\t\t\t\t/* paragraphs fields */\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n##### REST API\n\nTo scope the fields that are returned per collection type, you can use the `<field>:<scope>` syntax in the fields\nparameter as follows:\n\n```\nGET /items/pages\n\t?fields[]=sections.item:headings.id\n\t&fields[]=sections.item:headings.title\n\t&fields[]=sections.item:paragraphs.body\n\t&fields[]=sections.item:paragraphs.background_color\n```\n\n##### GraphQL\n\nIn GraphQL, you can use nested fragments on the Union Type to select the fields:\n\n```graphql\nquery {\n\tpages {\n\t\tsections {\n\t\t\titem {\n\t\t\t\t... on headings {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t}\n\n\t\t\t\t... on paragraphs {\n\t\t\t\t\tbody\n\t\t\t\t\tbackground_color\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n::: tip Updating\n\nUpdating records in a many-to-any is identical to the other relationship types.\n\n:::\n\n## SEARCH HTTP Method\n\nWhen using the REST API to read multiple items by (very) advanced filters, you might run into the issue where the URL\nsimply can\'t hold enough data to include the full query structure. In those cases, you can use the SEARCH http method as\na drop-in replacement for GET, where you\'re allowed to put the query into the request body as follows:\n\n**Before:**\n\n```\nGET /items/articles?filter[title][_eq]=Hello World\n```\n\n**After:**\n\n```json\nSEARCH /items/articles\n\n{\n\t"query": {\n\t\t"filter": {\n\t\t\t"title": {\n\t\t\t\t"_eq": "Hello World"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThere\'s a lot of discussion around whether or not to put a body in a GET request, to use POSTs to create search queries,\nor to rely on a different method altogether. As of right now, we\'ve chosen\n[to align with IETF\'s _HTTP SEARCH Method_ specification](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/).\nWhile we recognize this is still a draft spec, the SEARCH method has been used extensively before in the WebDAV world\n([spec](https://tools.ietf.org/html/rfc5323)), and compared to the other available options, it feels like the "cleanest"\nand most correct to handle this moving forward. As with everything else, if you have any ideas, opinions, or concerns,\n[we\'d love to hear your thoughts](http://github.com/directus/directus/discussions/new).\n\nUseful reading:\n\n- [_HTTP SEARCH Method_ (IETF, 2021)](https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/)\n- [_Defining a new HTTP method: HTTP SEARCH_ (Tim Perry, 2021)](https://httptoolkit.tech/blog/http-search-method/)\n- [_HTTP GET with request body_ (StackOverflow, 2009 and ongoing)](https://stackoverflow.com/questions/978061/http-get-with-request-body)\n- [_Elastic Search GET body usage_ (elastic, n.d.)](https://www.elastic.co/guide/en/elasticsearch/guide/current/_empty_search.html)\n- [_Dropbox starts using POST, and why this is poor API design._ (Evert Pot, 2015)](https://evertpot.com/dropbox-post-api/)\n\n## System data in GraphQL\n\nDue to restrictions in GraphQL itself, it\'s impossible to properly scope/namespace system functionality from regular\ndata access. In order to prevent any naming conflicts between user-created and system data, we\'ve scoped the access to\nthe two into two endpoints for user and system data respectively: `/graphql` and `/graphql/system`. Both endpoints share\nthe same underlying schema, so **nested relations will work as expected** regardless if they "cross over" between user\nand system data. The only difference in the two endpoints are the root query and mutation fields available.\n';export{e as default};
