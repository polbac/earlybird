var e='# Permissions\n\n> Permissions are attached directly to a Role, defining what Users can create, read, update, and delete within the\n> platform. [Learn more about Permissions](/concepts/permissions/).\n\n## Configuring Role Permissions\n\nDirectus possesses an extremely granular, yet easy to configure, permissions system. When creating a new role,\npermissions are disabled for all project collections by default — allowing you to give explicit access to only what is\nrequired. Individual permissions are applied to the role, and each is scoped to a specific collection and CRUD action\n(create, read, update, delete).\n\n::: warning Saves Automatically\n\nEvery change made to the permissions of a role is saved automatically and instantly.\n\n:::\n\n::: warning Admin Roles\n\nIf a role is set to **Admin Access** then it is granted complete access to the platform, and therefore the permission\nconfiguration field is disabled.\n\n:::\n\n1. Navigate to **Settings > Roles & Permissions > [Role Name]**\n2. Scroll to the **Permissions** section\n3. **Click the icon** for the collection (row) and action (column) you want to set\n4. Choose the desired permission level: **All Access**, **No Access**, or **Use Custom**\n\n**If you selected "All Access" or "No Access" then setup is complete.** If you chose to customize permissions then\ncontinue with the appropriate guide below based on the relevant _action_.\n\n### Create (Custom Access)\n\n5. **Field Permissions** control which fields accept a value on create. Fields are individually toggled.\n6. **Field Validation** define the rules for field values on create\n7. **Field Presets** control the field defaults when creating an item\n\n### Read (Custom Access)\n\n5. **Item Permissions** control which items can be read, as defined by the [Filter Rules](/reference/filter-rules)\n   entered.\n6. **Field Permissions** control which fields can be read. Fields are individually toggled.\n\n::: warning Read Field Permissions\n\nThe Directus App always requires read access to the Primary Key field (eg: `id`) so it can uniquely identify items.\nAlso, if a Collection has "Archive" or "Sort" fields configured, those fields will also need read access to use the\nApp\'s soft-delete and manual sorting features.\n\n:::\n\n### Update (Custom Access)\n\n5. **Item Permissions** control which items can be updated, as defined by the [Filter Rules](/reference/filter-rules))\n   entered.\n6. **Field Permissions** control which fields can be updated. Fields are individually toggled.\n7. **Field Validation** define the rules for field values on update, as defined by the\n   [Filter Rules](/reference/filter-rules) entered.\n8. **Field Presets** control the field defaults when updating an item\n\n### Delete (Custom Access)\n\n5. **Item Permissions** control which items can be deleted, as defined by the [Filter Rules](/reference/filter-rules/))\n   entered.\n\n## Configuring Public Permissions\n\nPublic permissions are managed the same as [normal role permissions](#configuring-role-permissions), however they are\ndone through the Public Role.\n\n## Configuring System Permissions\n\nIn addition to setting permissions for your project\'s collections, you can also tailor the permissions for system\ncollections. It is important to note that when [App Access](/guides/roles/#configuring-a-role) is enabled for a role,\nDirectus will automatically add permission for the necessary system collections. To edit system permissions, simply\nclick the "System Collections" toggle, and then edit permissions using the same steps as with project collections.\n\n::: tip Resetting System Permissions\n\nTo reset the role\'s system permissions for proper App access, expand the system collections and then click "Reset System\nPermissions" at the bottom of the listing.\n\n:::\n\n## Configuring Workflows\n\nWorkflows are a way to add structured stages to the flow of content authoring. They are primarily defined through the\npermissions for a Collection, but can be further enhanced via email notifications, custom interfaces, and automation.\nDirectus supports endlessly configurable workflows, so we will only cover one example below.\n\nLet\'s assume you would like to create a structured workflow for an **Articles** collection. The first step is to\n[Create a Field](/guides/fields/#creating-a-field) that can track the article "status" — we\'ll call it **Status**, but\nit can be named anything.\n\nNow you can configure your permissions based on the possible values of that Status field. In this case, those values\nwill be various content stages, such as `draft`, `review`, `approved`, and `published`.\n\nNext, you will want to create different Roles to scope each stage of the workflow. Let\'s keep this simple and assume\nthere are only two roles called `author` and `manager`.\n\nFinally, we would configure the permissions for these roles such that they are properly restricted to create content and\nupdate the status.\n';export{e as default};
