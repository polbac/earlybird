var e='# Fields\n\n> Fields are a specific type of value within a Collection, storing the data of your item\'s content. Each field\n> represents a **column** in your database. [Learn more about Fields](/concepts/fields/).\n\n::: tip System Fields\n\nWhile all out-of-the-box system fields are locked from editing or deleting, you are able to create new fields within the\nsystem collections. You can enable editing System Collections within the Collection sidebar component of\n[Settings > Data Model](/concepts/databases/).\n\n:::\n\n::: tip Database Fields\n\nKeep in mind that a Directus Field is just a database column. Therefore you can import or create a column directly in\nthe database, and it will automatically appear within Directus. The first time you manage that column, a\n`directus_fields` record will be created with default values.\n\n:::\n\n## Creating a Field\n\n1. Navigate to **Settings > Data Model > [Collection Name]**\n2. Under Fields & Layout, click the **Create Field** button\n3. **Choose the field type**, and follow its specific setup guide. (See below)\n   - [Schema Setup](#schema-setup)\n   - [Relationship Setup](#relationship-setup)\n   - [Field Setup](#field-setup)\n   - [Interface Options](#interface-options)\n   - [Display Options](#display-options)\n   - [Conditions](#conditions)\n\n### Schema Setup\n\nThis pane controls the technical details of the field\'s database column.\n\n- **Key** — (Required) The database column name and field\'s API key. The key must be unique within its parent\n  Collection. As of now, all keys are sanitized: lowercased, alphanumeric, and with spaces removed. Keys can not be\n  changed once created, however you can use [Translations](/concepts/translations/#schema-translations) to override the\n  field\'s display name in the App.\n- **Type** — (Required) How the data is saved to the database; See [Directus Data Type Superset](/concepts/types). This\n  dropdown maybe be limited or even disabled based on your chosen Field category.\n- **Length** — (Only for certain types) For String types this determines the number of characters that can be stored in\n  the database. For Float and Decimal types, this control becomes **Precision & Scale**.\n- **On Create** — (Only for certain types) For some data types, this option allows you to control what value is saved\n  when an item is created. These values are fallbacks and can be overridden by the App/API. For example, the Timestamp\n  type allows you to "Save Current Date/Time".\n- **On Update** — (Only for certain types) For some data types, this option allows you to control what value is saved\n  when an item is updated. These values are fallbacks and can be overridden by the App/API. For example, the UUID type\n  allows you to "Save Current User ID".\n- **Default Value** — This is the initial value shown for a field when creating an item in the App. If creating an item\n  via the API, this is the fallback value saved to the database if a field value is not submitted.\n- **Allow NULL** — Toggles if the database column is nullable. When disabled, a `NULL` value can not be saved to the\n  field\'s column.\n- **Unique** — Toggles if the database column\'s values must all be unique.\n\n### Relationship Setup\n\nThis pane is only shown when configuring relational fields (including images and translations).\n\n::: tip Matching Existing Schema\n\nTo select existing Collections or Fields, use the list icon button on the right-side of the input — exact schema matches\nare shown in blue. Collections or Fields without a match will be created on save. For more control over the primary key\nfield type, first follow the normal [Create a Collection](/guides/collections/#creating-a-collection) flow before\nconfiguring the relationship.\n\n:::\n\n::: tip Corresponding Field\n\n[Relationships go both ways](/concepts/relationships/#perspective-matters), so when creating a new relation Field,\nDirectus offers to automatically create the corresponding Field on the related Collection.\n\n:::\n\n#### Many-to-One\n\nThe [Many-to-One](/concepts/relationships/#many-to-one-m2o) is the only Relationship type that creates/uses an actual\nfield on the parent Collection. If the chosen Related Collection already exists, the primary key field is automatically\nselected. If the Related Collection does not already exist, you will be prompted to enter the name of its new primary\nkey field.\n\n![M2O](../assets/guides-fields/m2o.png)\n\n#### One-to-Many\n\nThe [One-to-Many](/concepts/relationships/#one-to-many-o2m) creates an [Alias](/concepts/fields/#fields) field on the\nparent Collection. To configure, enter or select a Related Collection and a field therein for storing the foreign key.\nThe related field must have a data type that matches the type of "This" Collection\'s primary key field.\n\n![O2M](../assets/guides-fields/o2m.png)\n\nThe optional **Sort Field** can be used enable the reordering of items within the O2M field. Configured by entering the\nname/key of a Field (numeric type only) from the Related Collection.\n\n#### Many-to-Many\n\nThe [Many-to-Many](/concepts/relationships/#many-to-many-m2m) creates an [Alias](/concepts/fields/#fields) field on the\nparent Collection. To configure, enter or select a Related Collection and a field therein for storing the foreign key.\n\nTo configure the Junction Collection, you can leave "Auto Fill" enabled to let Directus generate intelligent defaults,\nor disable it to select existing options or enter custom naming.\n\n![M2M](../assets/guides-fields/m2m.png)\n\n#### Many-to-Any\n\nThe [Many-to-Any](/concepts/relationships/#many-to-any-m2a) creates an [Alias](/concepts/fields/#fields) field on the\nparent Collection. To configure, select one or more Related Collections. The primary key field of each will\nautomatically be referenced.\n\nTo configure the Junction Collection, you can leave "Auto Fill" enabled to let Directus generate intelligent defaults,\nor disable it to select existing options or enter custom naming.\n\n![M2A](../assets/guides-fields/m2a.png)\n\n#### Translations\n\n[Translations](/concepts/translations/#content-translations) creates an [Alias](/concepts/fields/#fields) field on the\nparent Collection. The easiest way to create this is to use the modal wizard, which only asks for the Translation field\nname:\n\n![Translations](../assets/guides-fields/translations.png)\n\nIf you choose to switch to the **manual editor**, enter or select a Related Collection and a field therein for storing\nthe foreign key.\n\nTo configure the Translations Collection, you can leave "Auto Fill" enabled to let Directus generate intelligent\ndefaults, or disable it to select existing options or enter custom naming.\n\n![Translations](../assets/guides-fields/translations-2.png)\n\n### Field Setup\n\n- **Required** — Toggles if a value for the Field is required.\n  - Empty strings (`\'\'`) and `NULL` are **not** accepted as a valid value\n  - `0` and `false` are accepted as a valid value\n  - Default values are accepted as a valid value\n  - Permission Presets are accepted as a valid value\n- **Readonly** — (App Only) Sets the field to be disabled.\n- **Hidden** — (App Only) Hides the field in the App form.\n  - The field is still available in filters and Layout options.\n- **Note** — (App Only) Displayed below the field in the App form, providing a helpful comment for App users. This note\n  supports markdown.\n- **Field Name Translations** — (App Only) A repeater for translating the Field Name into different locales. It can also\n  be used to "rename" the field in the primary language without updating the field Key.\n\n### Interface Options\n\nThis pane includes any customization options that may be defined by the Interface.\n\n### Display Options\n\nThis pane includes any customization options that may be defined by the Display.\n\n### Conditions\n\nConditions allow you to alter the current field\'s setup based on the values of other fields in the form. This allows you\nto show/hide the field, make it readonly, or change the interface options.\n\nEach field can have one or more _rules_. Each rule has the following configuration options:\n\n- **Name**: The name of the rule. This is only used internally for convenience purposes\n- **Rule**: The rule that controls whether or not these conditions are applied. Rule follows the\n  [Filter Rules](/reference/filter-rules) spec\n- **Readonly**: Whether or not the field is readonly when the condition is matched\n- **Hidden**: Whether or not the field is hidden when the condition is matched\n- **Interface Options**: Any additional configuration for the selected interface\n\nThese changes to the field are merged onto the base configuration of the field. This means you can have the field hidden\nby default, and then only toggle the hidden state of the field in the condition.\n\n::: tip Order matters\n\nThe conditions are matched in order. The **last** condition that matches is the one that\'s used to apply the changes.\n\n:::\n\n## Updating a Field\n\n1. Navigate to **Settings > Data Model > [Collection Name]**\n2. Click the field you want to update\n3. Follow the specific setup guide for the field type...\n\n::: tip\n\nLearn more about the field options for [Adjusting the Field Layout](#adjusting-field-arrangement).\n\n:::\n\n## Renaming a Field\n\nWhile you can not change the **Key** of a field via Directus (as of now), you can change its **Name** and translations.\n\n1. Navigate to **Settings > Data Model > [Collection Name]**\n2. **Click the Field** you want to update\n3. Navigate to the **Field Tab**\n4. Click the Add New button under **Field Name Translations**\n5. Choose the desired **Language** (your primary language for "renaming")\n6. Enter a **Translation**\n7. Click the **Save** button\n\n::: tip Special Casing\n\nIf you are trying to update the specific casing (uppercase/lowercase) for a word (eg: `Dna` to `DNA`) you will want to\nadd the edge-case to the\n[Format Title package](https://github.com/directus/directus/tree/main/packages/format-title/src). If you feel the case\npasses our [80/20 rule](https://docs.directus.io/contributing/introduction/#feature-requests) you should submit a Pull\nRequest to the codebase, otherwise you can update this in your instance.\n\n:::\n\n## Duplicating a Field\n\n1. Navigate to **Settings > Data Model > [Collection Name]**\n2. Click the **More Options** icon for the field you want to delete\n3. Click the **Duplicate Field** option\n\n::: warning Relational and Primary Key Fields\n\nIt is not currently possible to duplicate relational fields or a collection\'s primary key.\n\n:::\n\n## Adjusting Field Arrangement\n\nThe form design of the collection\'s fields is determined by the following options.\n\n- **Field Visibility** — If the field is "Visible" or "Hidden"\n- **Field Width** — How wide the field is shown relative to the form/page\n  - Half — The field is shown at half the form width\n  - Full — (Default) The field is shown at the full form width\n  - Fill — The field is shown filling the page width\n- **Field Sort** — The order of fields within the form\n- **Field Group** — If the field is a "group" type\n\n\x3c!-- @TODO 1. Create any desired groupings by **[Creating a Field Group](/guides/fields)** --\x3e\n\n2. Click the **More Options** icon for any fields to adjust visibility\n3. Click the **More Options** icon for any fields to adjust width\n4. **Rearrange fields and groups** with their drag-and-drop handles\n\n## Deleting a Field\n\n1. Navigate to **Settings > Data Model > [Collection Name]**\n2. Click the **More Options** icon for the field you want to delete\n3. Click the **Delete Field** option\n4. Confirm this decision by clicking **Delete** in the dialog\n\n::: danger Irreversible Change\n\nThis action is permanent and can not be undone. Please proceed with caution.\n\n:::\n';export{e as default};
